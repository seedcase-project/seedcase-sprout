---
title: "Checking package and resource properties"
order: 2
jupyter: python3
---

The structure and content of package and resource properties follow the
[Frictionless Data Package standard](https://datapackage.org). This
standard defines the available fields for each type of metadata,
specifies which fields are required, and describes the allowed values
for each field. In addition to these specifications, Sprout introduces
its own structural and formatting requirements.

To make it easy to check metadata against all these requirements, Sprout
provides a set of check functions. Each check function takes a
properties object (`PackageProperties` or `ResourceProperties`) as
input, runs all necessary checks, and raises a group of `CheckError`s if
any checks fail (run `help(CheckError)` for more details). Each
`CheckError` corresponds to a specific violated requirement. If certain
error types are not relevant to your use case, you can configure the
check functions to ignore these.

## Checking package properties

A set of package properties with only the required fields filled in
might look like:

```{python}
import seedcase_sprout.core as sp
from textwrap import dedent

# For pretty printing of output
from pprint import pprint

package_properties = sp.PackageProperties(
    name="woolly-dormice",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    description=dedent('''
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        '''
    ),
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
)
```

To check that these properties are indeed complete and well-formed, we
use the `check_package_properties()` function. The function will not
raise any errors and will return the original input:

```{python}
package_properties = sp.check_package_properties(package_properties)
pprint(package_properties)
```

Now, let's say we didn't include a `description` in our package
properties. Running the check again, we see that an error is raised,
alerting us that this is a required field. See the end of the output:

```{python}
#| error: true
package_properties = sp.PackageProperties(
    name="woolly-dormice",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
)
sp.check_package_properties(package_properties)
```

Finally, let's say there are multiple errors in our package properties.
For example, we forgot the `description` and gave a `name` containing
special characters, which doesn't meet the expected format. In this
case, both errors will be listed in the output:

```{python}
#| error: true
package_properties = sp.PackageProperties(
    name="Woolly Dormice (Toros Dağları)",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
)
sp.check_package_properties(package_properties)
```

Note that `check_package_properties()` is for checking that a set of
package properties is well-formed without considering whether any
associated resource properties are well-formed. This function will only
run checks on package properties fields and not look at resource
properties fields.

In the package properties below, there is a set of resource properties
with all required fields missing. This will be ignored when the check
runs:

```{python}
package_properties = sp.PackageProperties(
    name="woolly-dormice",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    description=dedent('''
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        '''
    ),
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
    resources=[sp.ResourceProperties()],
)
pprint(sp.check_package_properties(package_properties))
```

## Checking resource properties

To check that a set of resource properties are complete and well-formed,
we use the `check_resource_properties()` function.

In the resource properties below, the required fields `title` and
`description` are missing, and `name` doesn't match the expected format.
An error will be raised for each problem:

```{python}
#| error: true
resource_properties = sp.ResourceProperties(
    name="Woolly Dormice (2015, Toros Dağları)",
    path="resources/1/data.parquet",
)
sp.check_resource_properties(resource_properties)
```

## Checking a full set of properties

When we want to check both package and resource properties, we can use
the `check_properties()` function. In the properties below, we have
three errors: the required `description` field is missing in both the
package and resource properties, and the resource `path` doesn't point
to a data file. When we run the check, all three errors are listed:

```{python}
#| error: true
properties = sp.PackageProperties(
    name="woolly-dormice",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
    resources=[sp.ResourceProperties(
        name="woolly-dormice-2015",
        title="Body fat percentage in the hibernating woolly dormouse",
        path="https://en.wikipedia.org/wiki/Woolly_dormouse"
        )],
)
sp.check_properties(properties)
```

## Understanding error messages

Let's have a closer look at the (end of the) error message we got in the
previous section:

```{log}
...
|     raise ExceptionGroup(
| ExceptionGroup: The following checks failed on the properties:
| PackageProperties(name='woolly-dormice', id='123-abc-123', title='Hibernation Physiology of the Woolly Dormouse: A Scoping Review.', description=None, homepage=None, version='1.0.0', created='2014-05-14T05:00:01+00:00', contributors=None, keywords=None, image=None, licenses=[LicenseProperties(name='odc-pddl', path=None, title=None)], resources=[ResourceProperties(name='woolly-dormice-2015', path='https://en.wikipedia.org/wiki/Woolly_dormouse', type=None, title='Body fat percentage in the hibernating woolly dormouse', description=None, sources=None, licenses=None, format=None, mediatype=None, encoding=None, bytes=None, hash=None, dialect=None, schema=None)], sources=None) (3 sub-exceptions)
+-+---------------- 1 ----------------
| seedcase_sprout.core.checks.check_error.CheckError: Error at `$.description` caused by `required`: 'description' is a required property
+---------------- 2 ----------------
| seedcase_sprout.core.checks.check_error.CheckError: Error at `$.resources[0].description` caused by `required`: 'description' is a required property
+---------------- 3 ----------------
| seedcase_sprout.core.checks.check_error.CheckError: Error at `$.resources[0].path` caused by `pattern`: 'path' should contain the resource ID
+------------------------------------
```

First, the offending properties are printed, followed by the list of
errors. Error messages are composed of the following parts:

-   "seedcase_sprout.core.checks.check_error.CheckError": the class
    representing the error. Check functions will always throw
    `CheckError`s.
-   "Error at `$.resources[0].description`": the location of the error
    in the properties object. `$` corresponds to the topmost layer of
    the object (the root); `.resources` points to the `resources` field
    of this layer; `[0]` indicates that the error is in the 0th (i.e.
    the first, counting from 0) resource properties object; and
    `.description` means that the `description` field of this resource
    properties is at fault.
-   "caused by `required`": the kind of requirement or expectation that
    was violated. Here, the expectation is that the field should be
    present (i.e. it is a required field).
-   "'description' is a required property": a longer, human-readable
    explanation of the error.

## Ignoring errors

In a scenario where we expect a set of properties to trigger certain
types of errors and want to ignore these during checks, we can configure
the check function not to raise errors for these violations.

For each type of error we want to ignore, we will construct a
`CheckErrorMatcher` object. Given a list of these `CheckErrorMatcher`s,
a check function will ignore an error if it matches **any**
`CheckErrorMatcher`.

### Simple example

Below, we create `CheckErrorMatcher`s for required and type errors and
pass them to `check_resource_properties()`. This way, the check will not
raise any errors, even though required fields are missing and `title`
has the wrong type.

```{python}
import seedcase_sprout.core.checks as checks

matcher1 = checks.CheckErrorMatcher(validator="required")
matcher2 = checks.CheckErrorMatcher(validator="type")
resource_properties = sp.ResourceProperties(
    path="resources/1/data.parquet",
    title=123,
)
pprint(sp.check_resource_properties(
    resource_properties,
    ignore=[matcher1, matcher2],
))
```

### Complex example

A `CheckErrorMatcher` can be configured to match a `CheckError` based on
its attributes:

-   `matcher.validator` matches `error.validator` if they are exactly
    the same.
-   `matcher.message` matches `error.message` if `matcher.message` is a
    substring of (i.e., is contained in) `error.message`.
-   `matcher.json_path` is a regular expression[^1] and matches
    `error.json_path` if the regular expression matches
    `error.json_path`.

[^1]: A [regular
    expression](https://en.wikipedia.org/wiki/Regular_expression) is a
    pattern expressed in a special notation that describes a piece of
    text with a particular form or structure. It is often used to find
    segments within a larger text that correspond to a specific pattern.

If a `CheckErrorMatcher` has multiple fields set, all of them have to
match for the matcher to match the error as a whole.

Now let's look at a more complex example. Suppose we want to ignore two
types of errors:

-   missing required fields in resource properties (but not in package
    properties)
-   any `name` field that violates the expected pattern

We define a `CheckErrorMatcher` for each:

```{python}
matchers = [
    checks.CheckErrorMatcher(validator="required", json_path=r"resources\[\d+\]"),
    checks.CheckErrorMatcher(validator="pattern", json_path=r"\.name$"),
]
```

With the first matcher, we want to match required errors, but only for
resource properties. Therefore, we are looking for errors whose
`json_path` includes the segment `resources[<digits>]`. For the second
matcher, we are looking for pattern errors with a `json_path` that ends
in `.name`.

::: callout-note
As the `json_path` of a matcher is interpreted as a regular expression,
characters with a special meaning in regular expressions (e.g., `.` or
`[...]`) must be escaped (hence `\.` and `\[...\]`) if you want them to
have their literal value.

When constructing regular expressions, it is often helpful to see them
in action in real time. Websites like [regexr](https://regexr.com/)
allow you to paste in some target text and see which parts are matched
by your regular expression. You can also hover over the regular
expression to see the match rule expressed by each section.
:::

We can then add the matchers as the `ignore` argument of
`check_properties()`. No errors will be raised when the check runs.

```{python}
properties = sp.PackageProperties(
    name="Woolly Dormice ~~ Toros Dağları",
    title="Hibernation Physiology of the Woolly Dormouse: A Scoping Review.",
    description=dedent('''
        This scoping review explores the hibernation physiology of the
        woolly dormouse, drawing on data collected over a 10-year period
        along the Taurus Mountain range in Turkey.
        '''
    ),
    id="123-abc-123",
    created="2014-05-14T05:00:01+00:00",
    version="1.0.0",
    licenses=[sp.LicenseProperties(name="odc-pddl")],
    resources=[sp.ResourceProperties(name="Body Fat Percentage ~~ 2015")],
)
pprint(sp.check_properties(properties, ignore=matchers))
```
