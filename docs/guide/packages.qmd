---
title: "Creating and managing data packages"
order: 1
jupyter: python3
---

At the core of Sprout is the
[{{< glossary "data package">}}](../glossary.qmd), which is a
standardized way of structuring and sharing data. This guide will show
you how to create and manage data packages using Sprout.

{{< include _preamble.qmd >}}

## Creating a data package

The first thing you'll need to decide is where you want to store your
data packages. By default, Sprout will create it in `~/sprout/packages/`
on Linux (see [Outputs](/docs/design/interface/outputs.qmd) for
operating system specific locations), but you can change this by setting
the `SPROUT_GLOBAL` environment variable. For instance, maybe you want
the location to be `~/Desktop/sprout/` or `~/Documents`. For our
example, we will store it in our current working directory in the hidden
folder `.storage/`.

```{python}
import seedcase_sprout.core as sp
import os
import pathlib

# For pretty printing of output
from pprint import pprint

os.environ["SPROUT_GLOBAL"] = ".storage/"
```

```{python}
#| include: false
pathlib.Path(".storage").mkdir(exist_ok=True)
```

Now we can make our first data package. A data package always needs a
`datapackage.json` file, which is a file that contains a set of
properties, or metadata, about the data package and later about the data
resources within. To set up this `datapackage.json` file as well as the
new package folder, we start with the `create_package_properties()`
function. This function takes the properties you want to add to the data
package and the path where you want to store the data package as
arguments. So first, we need to establish our properties.

We have several helper classes, such as `PackageProperties`,
`LicenseProperties`, and `ContributorProperties`, to make it easier for
you to make properties with the correct fields filled in. See the guide
on [properties](/docs/guide/properties.qmd) for more information about
these classes. Let's create a new data package with some basic
properties:

```{python}
properties = sp.PackageProperties(
    name="diabetes-hypertension-study",
    title="Diabetes and Hypertension Study",
    description="Data from the 2021 study on diabetes and hypertension",
    contributors=[
        sp.ContributorProperties(
            title="Jamie Jones",
            email="jamie_jones@example.com",
            path="example.com/jamie_jones",
            roles=["creator"],
        )
    ],
    licenses=[
        sp.LicenseProperties(
            name="ODC-BY-1.0",
            path="https://opendatacommons.org/licenses/by",
            title="Open Data Commons Attribution License 1.0",
        )
    ],
)
pprint(properties)
```

Now, let's create our data package with these properties:

```{python}
package_path = sp.create_package_properties(
    properties = properties,
    path=sp.path_sprout_global() / "diabetes-study"
)
pprint(package_path)
```

::: callout-important
The `create_package_properties()` function will give an error if the
required fields are not filled in correctly from the `PackageProperties`
object and will not create the `datapackage.json` file.
:::

This creates the initial structure of your new package. The output above
shows that the folder of your data package `diabetes-study` has been
created. This folder contains one file so far: `datapackage.json`. The
`datapackage.json` file contains the fields we wrote from above.

<!-- TODO: Add section on building the README -->

## Editing package properties

If we made a mistake and want to update the properties in the current
`datapackage.json`, you can use the `edit_package_properties()`
function:

```{python}
updated_package_properties = sp.edit_package_properties(
  path=package_path,
  properties=sp.PackageProperties(name="diabetes-study"),
)
pprint(package_properties)
```

::: callout-important
The `edit_package_properties()` function will give an error if the
required fields are not filled in to create a valid `datapackage.json`
file.
:::

This function only takes the properties and updates them, but does not
save it back to the `datapackage.json` file. To save it back to the
file, run:

```{python}
package_path = sp.write_package_properties(
  properties=updated_package_properties,
  path=package_path
)
pprint(package_path)
```

If you need help with filling in the right properties, see the
documentation for the `PackageProperties` classes or run e.g.,
`print(sp.PackageProperties())` to get a list of all the fields you can
fill in for a package.

You now have the basic starting point for adding data resources to your
data package.
