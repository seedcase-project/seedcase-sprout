---
title: "Creating and managing data packages"
order: 1
jupyter: python3
---

At the core of Sprout is the
[{{< glossary "data package">}}](../glossary.qmd), which is a
standardized way of structuring and sharing data. This guide will show
you how to create and manage data packages using Sprout.

{{< include _preamble.qmd >}}

## Creating a data package

We've designed Sprout to be used in a similar way that Git repositories
or Python virtual environments are used (for instance, as we recommend
in the [installation guide](installation.qmd)). What that means is, we
assume and expect that you will be creating and managing a data package
in the root of your Python (or Git) project. The same folder where your
`.git/` folder is or your `pyproject.toml` file is will also be the same
folder that has your `datapackage.json` file. With this expectation and
design, many of Sprout's helper path functions assume that the working
directory is the same directory where the `datapackage.json` file is (or
will be) stored and where the `pyproject.toml` file (or `.git/` folder)
is.

With that in mind, let's make our first data package! A data package
always needs a `datapackage.json` file. This file contains a set of
properties, or metadata, about the data package and, eventually, about
the data resources within it. To set up this `datapackage.json` file, we
start with the `create_package_properties()` function. This function
takes the properties you want to add to the data package and the path
where you want to store the data package as arguments. So first, we need
to establish our properties.

We have several helper classes, such as `PackageProperties`,
`LicenseProperties`, and `ContributorProperties`, to make it easier for
you to make properties with the correct fields filled in. See the guide
on [properties](/docs/guide/properties.qmd) for more information about
these classes.

First, let's import the necessary modules and set up the environment:

```{python}
import seedcase_sprout.core as sp

# For pretty printing of output
from pprint import pprint
```

Then we can create the new data package with some basic properties:

```{python}
properties = sp.PackageProperties(
    name="diabetes-hypertension-study",
    title="Diabetes and Hypertension Study",
    description="Data from the 2021 study on diabetes and hypertension",
    contributors=[
        sp.ContributorProperties(
            title="Jamie Jones",
            email="jamie_jones@example.com",
            path="example.com/jamie_jones",
            roles=["creator"],
        )
    ],
    licenses=[
        sp.LicenseProperties(
            name="ODC-BY-1.0",
            path="https://opendatacommons.org/licenses/by",
            title="Open Data Commons Attribution License 1.0",
        )
    ],
)
pprint(properties)
```

Now, let's create our data package with these properties.

::: callout-note
For this guide, we will create this data package in a temporary folder.
In a real project, you would create the data package in the root of your
project. We'll make this temporary folder using:

```{python}
import tempfile
from pathlib import Path

temp_path = tempfile.TemporaryDirectory()
package_path = Path(temp_path.name) / "diabetes-study"

# Create the path to the package
package_path.mkdir(parents=True)
```
:::

```{python}
package_path = sp.create_package_properties(
    properties = properties,
    path = package_path
)
print(package_path)
```

::: callout-important
The `create_package_properties()` function will give an error if the
required fields are not filled in correctly from the `PackageProperties`
object and will not create the `datapackage.json` file.
:::

This creates the initial structure of your new package. The
`create_package_properties()` function created the `datapackage.json`
file in your data package `diabetes-study` folder, which contains the
properties you added to it.

<!-- TODO: Add section on building the README -->

## Editing package properties

If we made a mistake and want to update the properties in the current
`datapackage.json`, you can use the `edit_package_properties()`
function:

```{python}
updated_package_properties = sp.edit_package_properties(
  path=package_path,
  properties=sp.PackageProperties(name="diabetes-study"),
)
pprint(updated_package_properties)
```

::: callout-important
The `edit_package_properties()` function will give an error if the
required fields are not filled in to create a valid `datapackage.json`
file.
:::

This function only takes the properties and updates them, but does not
save it back to the `datapackage.json` file. To save it back to the
file, run:

```{python}
package_path = sp.write_package_properties(
  properties=updated_package_properties,
  path=package_path
)
pprint(package_path)
```

If you need help with filling in the right properties, see the
documentation for the `PackageProperties` classes or run e.g.,
`print(sp.PackageProperties())` to get a list of all the fields you can
fill in for a package.

You now have the basic starting point for adding data resources to your
data package.

## Making a package in a multi-user environment

If you are making and managing data packages in a multi-user server
environment that will have or has multiple data packages, there are some
very small changes you can make to creating and managing packages. While
Sprout assumes the functions are being used to create and manage a data
package in the working directory, all the functions take the `path` as
an argument. Which means, they can run in any directory. With that in
mind, we have a series of helper path functions that can be used to
point to a "global" Sprout storage location.

The first thing you'll need to decide is where you want to store your
data packages in this type of environment. By default, Sprout will
create it in `~/sprout/packages/` on Linux (see
[Outputs](/docs/design/interface/outputs.qmd) for operating system
specific locations), but you can change this by setting the
`SPROUT_GLOBAL` environment variable. For instance, maybe you want the
location to be `~/Desktop/sprout/` or `~/Documents`. For our example, we
will store it in our current working directory in the hidden folder
`.storage/`.

```{python}
import os
os.environ["SPROUT_GLOBAL"] = ".storage/"
```

Now, we can create a new data package in this global location, with only
one change:

```{python}
# TODO: Update this after fixing the path_package() function
package_path=sp.path_sprout_global() / "diabetes-study"
package_path.mkdir(parents=True)
sp.create_package_properties(
    properties = properties,
    path=package_path
)
```

After creating the package, you can use functions like `path_package()`
to point to the correct package or `path_packages()` to list all the
package in the storage:

```{python}
print(sp.path_packages())
```

```{python}
#| include: false
temp_path.cleanup()
```
