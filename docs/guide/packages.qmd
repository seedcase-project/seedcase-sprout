---
title: "Creating and managing data packages"
order: 1
jupyter: python3
---

At the core of Sprout is the
[{{< glossary "data package">}}](../glossary.qmd), which is a
standardized way of structuring and documenting data. This guide will
show you how to create and manage data packages using Sprout.

{{< include _preamble.qmd >}}

## Creating a data package

Sprout is designed to work in the root of your Python project--â€”where your `.git/` folder and/or `pyproject.toml` file is located (see the [installation guide](installation.qmd#installation) for how to install Sprout in a virtual environment). By default, Sprout's helper functions expect the working directory to be the root of your project. Throughout this guide we will refer to the root folder of the Python project as the root folder of the data package.

<!-- TODO: Update the section below after the properties templates have been implemented -->

With that in mind, let's make a data package! A data package always
needs a `datapackage.json` file. This file will be located at the root of your data package and contains a set of
[{{< glossary "properties">}}](../glossary.qmd), or metadata about the
data package and the data resources within it. To set
up this `datapackage.json` file, you first need a set of properties you
want to add to the data package. Then, you can use the
`write_package_properties()` function that takes the properties and the
path where you want to store the data package as arguments. So first,
you need to establish our properties.

Sprout includes several data classes, such as `PackageProperties`,
`LicenseProperties`, and `ContributorProperties`, to make it easier for
you to make properties with the correct fields filled in. See the guide
on [properties](/docs/guide/properties.qmd#properties) for more
information about these data classes.

First, import the necessary modules and set up the environment:

```{python}
import seedcase_sprout as sp
```

There are a few properties that are required for a data package, such as
`version`, `id`, and `created`. While you could fill these in manually,
it's much easier to use the `from_default()` method of the
`PackageProperties` class:

```{python}
properties = sp.PackageProperties.from_default(
    name="diabetes-hypertension-study",
    title="Diabetes and Hypertension Study",
    description="Data from the 2021 study on diabetes and hypertension",
    contributors=[
        sp.ContributorProperties(
            title="Jamie Jones",
            email="jamie_jones@example.com",
            path="example.com/jamie_jones",
            roles=["creator"],
        )
    ],
    licenses=[
        sp.LicenseProperties(
            name="ODC-BY-1.0",
            path="https://opendatacommons.org/licenses/by",
            title="Open Data Commons Attribution License 1.0",
        )
    ],
)
print(properties)
```

Now, time to create your data package with these properties.

::: callout-note
For this guide, you will create this data package in a temporary folder.
In a real project, you would create the data package in the root of your
project. You do not need to do this below code. Yours may use something
like `pathlib.Path().cwd()` to get the current working directory of your
Python or Git project.

```{python}
from tempfile import TemporaryDirectory
from pathlib import Path

temp_path = TemporaryDirectory()
package_path = Path(temp_path.name) / "diabetes-study"

# Create the path to the package
package_path.mkdir(parents=True)
```
:::

```{python}
sp.write_package_properties(
    properties=properties,
    path=sp.PackagePath(package_path).properties()
)
```

::: callout-important
The `write_package_properties()` function will give an error if the
`PackageProperties` object is missing some of its required fields or if
they are not filled in correctly. In that case, a `datapackage.json`
file won't be created.
:::

This creates the initial structure of your new package. The
`write_package_properties()` function created the `datapackage.json`
file in your data package `diabetes-study` folder, which contains the
properties you added to it. The newly created file would be:

```{python}
#| echo: false
print(package_path.glob("**/*"))
```

## Creating a README of the properties

Having a *human-readable* version of what is contained in the
`datapackage.json` file is useful for others who may be working with or
wanting to learn more about your data package. You can use `as_readme_text()` to
convert the properties into text that can be added to a
README file. Let's create a README file with the properties of the data
package you just created:

```{python}
readme_text = sp.as_readme_text(properties)
print(readme_text)
```

It outputs a text string so that, if you want to, you can add other,
maybe project specific, information before writing to the file. For this
guide we won't cover how or why to do this.

Then to save it to the file:

```{python}
sp.write_file(
    string=readme_text,
    path=Path(package_path / "README.md")
)
```

## Editing package properties

If you made a mistake and want to update the properties in the current
`datapackage.json`. You likely want to edit the properties in the
`datapackage.json` file so you first need to read in the properties from
the file. You can do this with the `read_properties()` function that
takes the path to the `datapackage.json` file as an argument.

```{python}
current_properties = sp.read_properties(
  path=sp.PackagePath(package_path).properties(),
)
```

Then you you can use the `update_package_properties()` function
while using the helper `PackagePath().properties()` function to point to the
`datapackage.json` file. The default behavior of the `PackagePath().properties()`
function is to look in the current working directory, but for this
guide, it is pointing to the temporary folder created from above.

```{python}
updated_package_properties = sp.update_package_properties(
  current_properties=current_properties,
  update_properties=sp.PackageProperties(name="diabetes-study"),
)
```

::: callout-important
The `update_package_properties()` function will give an error if the
required fields are not filled in correctly and so will not create a
`datapackage.json` file.
:::

This function only takes the properties and updates them, but does not
save it back to the `datapackage.json` file. To save it back to the
file, run:

```{python}
sp.write_package_properties(
  properties=updated_package_properties,
  path=sp.PackagePath(package_path).properties(),
)
```

If you need help with filling in the right properties, see the
documentation for the `PackageProperties` classes or run e.g.,
`print(sp.PackageProperties())` to get a list of all the fields you can
fill in for a package.

You now have the basic starting point for adding data resources to your
data package.

```{python}
#| include: false
temp_path.cleanup()
```
