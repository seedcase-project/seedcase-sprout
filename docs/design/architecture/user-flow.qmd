---
title: User Flow
---

This document describes the user flow of Sprout. The user flow is split
into five diagrams that go through the flow in more detail. At the end
of the document, you can see the user flow of Sprout in its entirety.

In this document, we will mention different user roles. Go to the
[Users](user-roles.qmd) post for definitions of user roles.

<!-- TODO: Add more of an overall introduction to what the user flow of sprout entails before going into each part -->

## Table Metadata Creation

The first step of uploading data to Sprout is to create a table for the
data. Users with the role [Data Management
Administrators](user-roles.qmd#data-management-administrators) are
responsible for setting up these initial structures of the database.

Table metadata includes:

-   Table name
-   Original file name
-   Description (A short description of what data the table contains)
-   Created by (ID of user creating the table)
-   Created at (timestamp of when the table was created)
-   Modified by (ID of user modifying the table; if table hasn't been
    modified this is NULL)
-   Modified at (timestamp fo when the table was modified; if table
    hasn't been modified this is NULL)

Below, we show an example of how the table metadata is stored for a
table named `table_1` in a data resource that has not been modified:

| table_id | table     | original_file_name | description                          | created_by | created_at          | modified_at | modified_by |
|---------|---------|---------|---------|---------|---------|---------|---------|
| 1        | `table_1` | `table_1.csv`      | This table contains user information | 1          | 2024-01-01 08:00:00 | NULL        | NULL        |

: Example of table metadata for `table_1`

A [Data Management
Administrator](user-roles.qmd#data-management-administrators) only needs to
write the table name and description. The remaining information is
extracted by Sprout behind the scenes.

Whenever a new table metadata is added, Sprout will check whether a
table with the exact same name already exists. It will not be possible
to create a table with a name that already exists, and the user will be
asked to write a different name for the table.

![Diagram of the flow that occurs when table metadata is
created.](images/user-flow/user-flow-table-metadata-creation.svg)

After a table's metadata has been created, the next step is to define
the columns within the table. Column metadata includes:

-   Column name (machine-readable column name, textbox)
-   Title (human-readable column name, textbox, optional)
-   Data type (choose data type from a list available data types,
    dropdown),
-   A short description (a sentence describing what the column contains,
    textbox)
-   Allow missing (whether missing values are allowed in the column,
    boolean, i.e., true/false or 1/0)
-   Allow duplication (whether duplicate values are allowed in the
    column, boolean, i.e., true/false or 1/0)

Below, we show an example of column metadata for columns describing
users in `table_1`:

| table_metadata | column-name  | title        | description                    | data_type | allow_missing_value | allow_duplicate_value |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| `1`            | `user_id`    | `User ID`    | Unique ID identifying the user | `int`     | 0                   | 0                     |
| `1`            | `user_name`  | `Username`   | User's username                | `int`     | 0                   | 0                     |
| `1`            | `last_name`  | `Last Name`  | User's last name               | `varchar` | 0                   | 1                     |
| `1`            | `first_name` | `First Name` | User's first name              | `varchar` | 0                   | 1                     |
| `1`            | `email`      | `Email`      | User's email address           | `int`     | 0                   | 0                     |

: Example of column metadata for columns in `table_1`.

In Sprout, there are four ways to create column metadata:

-   Create Column Metadata from File
-   Create Column Metadata from Table Metadata File
-   Create Column Metadata from Existing Table
-   Create Column Metadata Manually

### Create Table from File with Data

The first option is to create a table from a file with data of the
wanted structure. In this workflow, a file is selected to extract column
metadata from. Sprout will check whether the selected file is a
supported file type and extract the metadata from the columns in the
file. From the original column names that are in the file, Sprout will
create column names in [snake
case](https://en.wikipedia.org/wiki/Snake_case).

### Create Table from Column Metadata File

The second option is to create a table from a file describing the column
metadata. This is similar to the workflow described above except that
the selected file is a file containing the column metadata instead of
raw data. Identical to the first option, Sprout will create column names
in snake case based on the original column names.

### Create Table from Existing Table

The third option is to create a table from an existing table. This
includes choosing an existing table as a "base table" for the [Data
Management Administrator](user-roles.qmd#data-management-administrators) to
build a new table from.

### Create Table Manually

The fourth option is to create a table manually. In this scenario, the
[Data Management
Administrator](user-roles.qmd#data-management-administrators) will add
headers and definitions of the table manully.

![Diagram of the flow that occurs when column metadata is
created.](images/user-flow/user-flow-column-metadata-creation.svg)

<!--TODO SKB 19 January 2024: This is where I got to in the update of this post. It will probably change again, so I will stop this update for now and return at a later stage-->

## Validation Check: Table Completeness

When the initial table has been created, Sprout will complete a
validation check, "Table Completeness". This check identifies whether
all headers/column names have definitions.

If there are missing fields (e.g., a column is missing a data type), the
validation will fail. "Validation failed" will be shown on a user
interface together with the table.

::: callout-note
When a table is created using a file, the *description* fields will
initially be empty, since descriptions of headers are not within the
file itself. By ensuring that [Data Management
Administrators](user-roles.qmd#data-management-administrators) add
descriptions of the headers, it will be easier for others to understand
what that header/column contains.
:::

Then, the user will have the option to click "Save and Submit Table", or
to save a draft of the table.

At this user interface, missing fields will initially be highlighted in
blue so the [Data Management
Administrator](user-roles.qmd#data-management-administrators)'s attention is
led to these missing fields. They will only be able to continue, if no
fields have missing values. If a user clicks "Save and Submit Table"
without having filled in all fields, the missing fields will be
highlighted in red.

![Diagram of the process flow for validating the
table.](images/user-flow/user-flow-validation-table-completeness.svg)

### User Confirmation: Table Correctness

Then, when the validation is successful, Sprout will show the [Data
Management Administrator](user-roles.qmd#data-management-administrators) the
final table for confirmation. This works as a user-driven check for
*corretness*, i.e., is the table filled in correctly, rather than is the
table complete, as the validation check before this step.

If the [Data Management
Administrator](user-roles.qmd#data-management-administrators) decides that
the table is not correct, they will click "Edit Table", and they will be
shown a user interface with the table where they can edit the headers,
definitions, and add new fields if needed.

When the [Data Management
Administrator](user-roles.qmd#data-management-administrators) is satisfied
with their adaptions, they click "Save and Submit Table". The table will
then go through the validation check, "Table Completeness" again and if
the validation is successful, Sprout will confirm: "New Table Added
Successfully".

<!-- TODO: This description and the user flow diagram is not entirely identical. It needs further work. -->

### Continue to Data Upload or Quit?

Now, that the table has been created successfully, the [Data Management
Administrator](user-roles.qmd#data-management-administrators) has two
options: Either they can "Continue to Data Upload", if they want to add
data to the newly created table right after the table has been
submitted, or they can choose to quit Sprout at this step, if they only
wanted to create the table as preparation for future uploads.

![Diagram describing the next steps given after creating the table and
passing the validation
steps.](images/user-flow/user-flow-table-created-continue-to-upload.svg)

## Data Upload

There are two entry points for a user to upload data using an existing
table. The first option is to continue from the diagram above, where the
[Data Management
Administrator](user-roles.qmd#data-management-administrators) will upload
data right after they have created a new table. In this option, they
click "Continue to Data Upload" (left path of diagram below).

![Diagram showing the steps taken for uploading data when using an
existing
table.](images/user-flow/user-flow-prepare-to-upload-using-existing-table.svg)

The other option is the typical [Data
Contributor](user-roles.qmd#data-contributors) route where the user will
enter Sprout, click "Upload Data", and then "Use Existing Table". Sprout
will then show the user a list of existing tables to choose from and the
user will select a table and select a file to upload. Then, they will
click "Continue to Data Upload" (right path in the diagram above).

After these steps, Sprout will initialise the data upload. This
initialisation includes a validation check, *Table and Data Match*, as
seen in the diagram below. At this step, Sprout checks whether the data
and table match. If this validation fails, Sprout will show "Validation
Failed" along with error messages where the system detects that the data
does not match the table.

The aim here is to show the user error messages that are as meaningful
and helpful as possible. These messages should enable the user to go to
their raw data and edit them to attempt to fix the errors. This step is,
naturally, outside of Sprout (therefore, marked in blue in the diagram
below). The user will then click "Upload Edited/New Version of File" and
Sprout will show a user interface, where the user can add the new
version of the file. When the user has selected the file and clicks
"Upload File", the validation check runs again.

If the validation fails, the loop with showing errors, user editing file
outside of Sprout and uploading it again, will happen again.

If validation succeeds, the data will be uploaded and Sprout will
confirm: "Upload Successful".

![Diagram showing the steps that occur after validation and final data
upload from a Data Contributor.](images/user-flow/user-flow-data-upload.svg)

## Entire User Flow

In the text and diagrams above, we have "chopped" the user flow of
Sprout into five pieces and gone through each of them. In the diagram
below, you can see the user flow in its entirety.

<!-- TODO: Update full user flow diagram to include all the other diagrams after review -->

![Diagram showing the full flow from user inputting data into it finally
being stored in the database.](images/user-flow/user-flow.svg)
