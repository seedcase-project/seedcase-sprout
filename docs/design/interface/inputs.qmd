---
title: "Inputs"
---

We describe in the architecture [input
data](/docs/design/architecture/input-data.qmd) generally what domain
the data comes from and how it may conceptually look like, while in this
document we describe the inputs into Sprout at a technical level.

From the [naming](/docs/design/architecture/naming.qmd) document, the
objects we incorporate in the interface are primarily: paths,
properties, and data.

Paths

:   These objects are always `Path` objects from Python's
    [`pathlib`](https://docs.python.org/3/library/pathlib.html).

Properties

:   These are Python
    [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    we've created to represent the metadata (properties) of a data
    package or resource. They are always prefixed with `*Properties`,
    such as `PackageProperties` and `ResourceProperties`.

Data

:   These data input objects are always a
    [Polars](https://decisions.seedcase-project.org/why-polars-for-data-cleaning/)
    `DataFrame` object. Polars is a fast DataFrame library implemented
    in Rust and exposed to Python through the `py-polars` library. It is
    a powerful framework for working with and processing data.

:   The data objects must also be already
    [tidy](https://vita.had.co.nz/papers/tidy-data.html) before Sprout
    can use them. Tidy data is a conceptual framework around how data
    should be structured to be optimally usable for analysis. This is
    similar to what is called [third normal
    form](https://en.wikipedia.org/wiki/Third_normal_form) in relational
    database development, excluding the emphasis on creating additional
    tables to reduce redundancy.

:   Tidy data has the following properties:

    1.  Each variable forms a column.
    2.  Each observation forms a row.
    3.  Each cell has a single value that represents both the column and
        row entity.

    This structure makes it easier to process and use the data for later
    analysis. If it is already in this form, there is less need to
    transform it later.

:   We have set a requirement on using tidy data frames as it simplifies
    the workflow and allows a user to use their own, potentially highly
    customised, workflows for processing the data that they have
    already. This also allows for a more flexible and user-friendly
    interface to Sprout, since we don't need to support or consider all
    the wide variety of formats data can be stored or structured.
    Because data processing and organizing can be so strongly dependent
    on the domain, we leave this to the user to handle.
