---
title: "Flows"
toc-depth: 2
---

::: callout-important
We created this document mainly as a way to help us as a team all
understand and agree on what we're making and what needs to be worked
on. This means that the flows may change quite substantially until we've
reached a stable full release at `v1.0.0`.
:::

Based on the [functions](functions.qmd) that list and describe the main
functions and classes that make up the interface, this document
describes and shows how all these objects work together and flow into
one another, but not necessarily the functions' exact input and output.
Those are already described in the [functions](functions.qmd) document.

Each diagram uses specific shapes and lines to represent different
things:

-   A dotted line between objects/functions means the flow is optional.
-   A solid line between objects/functions means the flow is required
    and is the next step.
-   A cylinder means an object such as a class or file.
-   A rectangle with rounded corners means an action like a function or
    method.

::: callout-caution
For some reason, the diagrams below don't display well on some browsers
like Firefox. To see them, try using a different browser like Chrome or
Edge.
:::

## Creating a new package

This is the flow for making a new package. The
`write_package_properties()` will internally call `check_properties()`,
but it can also be called separately to check the properties before
writing them to the `datapackage.json` file.

```{mermaid}
%%| label: fig-flow-new-package
%%| fig-cap: "Diagram showing the flow of objects and functions to create a new package."
%%| fig-alt: "A flow diagram showing the steps to making a new package."
flowchart
    properties[(PackageProperties)]
    path_properties("path_properties()")
    check_properties("check_properties()")
    write_package_properties("write_package_properties()")

    properties -.-> check_properties
    properties --> write_package_properties
    path_properties --> write_package_properties
```

## Updating properties in an existing package

The flow for updating properties in an existing package. The
`update_package_properties()` function will internally call
`check_properties()`, but it can also be called separately to check the
properties before updating them in the `datapackage.json` file.

```{mermaid}
%%| label: fig-flow-update-package
%%| fig-cap: "Diagram showing the flow of objects and functions to update properties in an existing package."
%%| fig-alt: "A flow diagram showing the steps to updating properties in an existing package."
flowchart
    properties_current[("PackageProperties<br>(current)")]
    properties_updates[("PackageProperties<br>(updates)")]
    properties_updated[("PackageProperties<br>(updated)")]
    path_properties("path_properties()")
    update_package_properties("update_package_properties()")
    read_package_properties("read_package_properties()")
    write_package_properties("write_package_properties()")

    path_properties --> read_package_properties
    read_package_properties --> properties_current
    properties_current --> update_package_properties
    properties_updates --> update_package_properties
    update_package_properties --> properties_updated
    properties_updated --> write_package_properties
    path_properties --> write_package_properties
```

## Save new, added, or modified raw data to batch

A data resource needs data, not just properties. You can add data to any
data resource that has resource properties. Whenever data is added to a
data resource, it gets first saved in the `batch/` folder to keep track
of additions or changes. You add the data when:

-   A new data resource is created and data is added to it.
-   Additional data is added to an existing data resource.
-   You need to fix, update, or modify existing data in the resource by
    correcting the data (e.g. fixing a data entry issue).

The data must be in a tidy format and must have already been loaded in
as a Polars DataFrame.

```{mermaid}
%%| label: fig-flow-save-raw-data-to-batch
%%| fig-cap: "Diagram showing the flow of objects and functions to save new, added, or modified raw data to a batch."
%%| fig-alt: "A flow diagram showing the steps to save new, added, or modified raw data to a batch."
flowchart
    raw_data[("DataFrame<br>(raw data)")]
    resource_properties[(ResourceProperties)]
    write_resource_batch("write_resource_batch()")
    check_data("check_data()")

    raw_data --> write_resource_batch
    resource_properties --> write_resource_batch
    raw_data -.-> check_data
    resource_properties -.-> check_data
```

### Check data against the properties

The data must always match what is described in the properties. This
means that the data must have the same column names, column types, type
of columns' individual values (in rows), and constraints of columns'
values. The `check_data()` function will internally call several
separate functions for these specific checks. Each of these functions
outputs a string with an error message describing what the problems are
if the check fails, otherwise it outputs a data frame with the same data
as the input. The `check_data()` then gathers together all the messages
and gives an error using those messages if there are any.

```{mermaid}
%%| label: fig-flow-check-data-against-properties
%%| fig-cap: "Diagram showing the flow of objects and functions to check data against the properties."
%%| fig-alt: "A flow diagram showing the steps to check data against the properties."
flowchart
    data[(DataFrame)]
    resource_properties[(ResourceProperties)]
    check_data("check_data()")
    subgraph Internal
        check_column_names("_check_column_names()")
        check_column_types("_check_column_types()")
        check_column_values_constraints("_check_column_values_constraints()")
        output[("DataFrame<br>or error")]
    end

    data --> check_data
    resource_properties --> check_data
    check_data -.-> Internal
    check_column_names -.-> output
    check_column_types -.-> output
    check_column_values_constraints -.-> output
```
