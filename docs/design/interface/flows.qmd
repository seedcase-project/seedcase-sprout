---
title: "Flows"
toc-depth: 2
---

::: callout-important
We created this document mainly as a way to help us as a team all
understand and agree on what we're making and what needs to be worked
on. This means that the flows may change quite substantially until we've
reached a stable full release at `v1.0.0`.
:::

Based on the [functions](functions.qmd) that list and describe the main
functions and classes that make up the interface, this document
describes and shows how all these objects work together and flow into
one another, but not necessarily the functions' exact input and output.
Those are already described in the [functions](functions.qmd) document.

Each diagram uses specific shapes and lines to represent different
things:

-   A dotted line between objects/functions means the flow is optional.
-   A solid line between objects/functions means the flow is required
    and is the next step.
-   A cylinder means an object such as a class or file.
-   A rectangle with rounded corners means an action like a function or
    method.

::: callout-caution
For some reason, the diagrams below don't display well on some browsers
like Firefox. To see them, try using a different browser like Chrome or
Edge.
:::

## Creating a new package

This is the flow for making a new package. The
`write_package_properties()` will internally call `check_properties()`,
but it can also be called separately to check the properties before
writing them to the `datapackage.json` file.

```{mermaid}
%%| label: fig-flow-new-package
%%| fig-cap: "Diagram showing the flow of objects and functions to create a new package."
%%| fig-alt: "A flow diagram showing the steps to making a new package."
flowchart
    properties[(PackageProperties)]
    path_properties("path_properties()")
    check_properties("check_properties()")
    write_package_properties("write_package_properties()")

    properties -.-> check_properties
    properties --> write_package_properties
    path_properties --> write_package_properties
```

## Updating properties in an existing package

The flow for updating properties in an existing package. The
`update_package_properties()` function will internally call
`check_properties()`, but it can also be called separately to check the
properties before updating them in the `datapackage.json` file.

```{mermaid}
%%| label: fig-flow-update-package
%%| fig-cap: "Diagram showing the flow of objects and functions to update properties in an existing package."
%%| fig-alt: "A flow diagram showing the steps to updating properties in an existing package."
flowchart
    properties_current[("PackageProperties<br>(current)")]
    properties_updates[("PackageProperties<br>(updates)")]
    properties_updated[("PackageProperties<br>(updated)")]
    path_properties("path_properties()")
    update_package_properties("update_package_properties()")
    read_package_properties("read_package_properties()")
    write_package_properties("write_package_properties()")

    path_properties --> read_package_properties
    read_package_properties --> properties_current
    properties_current --> update_package_properties
    properties_updates --> update_package_properties
    update_package_properties --> properties_updated
    properties_updated --> write_package_properties
    path_properties --> write_package_properties
```

## Extract resource properties from data

The flow for extracting resource properties from data. This is useful
when the data is in a format that contains metadata about the data, such
as a CSV file with a header row that contains the column names. The
`extract_resource_properties()` function cannot extract all required
properties from the data, so they must be updated by the user. So both
`TableSchemaProperties` and `ResourceProperties` will need many of their
fields filled in after using `extract_resource_properties()`. The
`update_resource_properties()` function will internally call
`check_resource_properties()`.

```{mermaid}
%%| label: fig-flow-extract-resource-properties
%%| fig-cap: "Diagram showing the flow of objects and functions to extract resource properties from data."
%%| fig-alt: "A flow diagram showing the steps to extract resource properties from data."
flowchart
    data_file[(Data file)]
    properties_extracted[("ResourceProperties<br>(extracted)")]
    properties_updates[("ResourceProperties<br>(additions)")]
    schema_properties_updates[("TableSchemaProperties<br>(additions)")]
    properties_updated[("ResourceProperties<br>(updated)")]
    update_resource_properties("update_resource_properties()")
    path_properties("path_properties()")
    extract_resource_properties("extract_resource_properties()")
    write_resource_properties("write_resource_properties()")

    data_file --> extract_resource_properties
    extract_resource_properties --> properties_extracted
    properties_extracted --> update_resource_properties
    schema_properties_updates --> properties_updates
    properties_updates --> update_resource_properties
    update_resource_properties --> properties_updated
    properties_updated --> write_resource_properties
    path_properties --> write_resource_properties
```

## Update README after changing package or resource properties

The flow for updating the README file after changing the package or
resource properties. Since the README template text is generated from
the properties in the `datapackage.json` file, any change to that file
will require updating the README file. The split between
`as_readme_text()` and `write_file()` is to allow for testing or
programmatically modifying the generated README text before writing it
to the file.

```{mermaid}
%%| label: fig-flow-update-readme
%%| fig-cap: "Diagram showing the flow of objects and functions to update the README file after changing the package or resource properties."
%%| fig-alt: "A flow diagram showing the steps to update the README file after changing the package or resource properties."
flowchart
    properties[(PackageProperties)]
    path_properties("path_properties()")
    read_package_properties("read_package_properties()")
    as_readme_text("as_readme_text()")
    write_file("write_file()")
    path_readme("path_readme()")

    path_properties --> read_package_properties
    read_package_properties --> properties
    properties --> as_readme_text
    as_readme_text --> write_file
    path_readme --> write_file
```

## Create resource properties manually

If the user doesn't have a raw data file yet, but the user knows what
the properties will be, they can use this workflow to add the resource
properties manually. The `write_resource_properties()` function will
internally call `check_resource_properties()`, but it can also be called
separately to check the properties before writing them to the
`datapackage.json` file.

```{mermaid}
%%| label: fig-flow-create-resource-properties
%%| fig-cap: "Diagram showing the flow of objects and functions to create resource properties manually."
%%| fig-alt: "A flow diagram showing the steps to create resource properties manually."
flowchart
    properties[(ResourceProperties)]
    path_properties("path_properties()")
    check_resource_properties("check_resource_properties()")
    write_resource_properties("write_resource_properties()")

    properties -.-> check_resource_properties
    properties --> write_resource_properties
    path_properties --> write_resource_properties
```

## Update resource properties

If you want to make a change to one or more of the fields inside the
resource properties, this would be the flow you use. While the
`update_resource_properties()` and `write_resource_properties()`
functions will internally call `check_resource_properties()`, they can
also be called separately to check the properties before updating them
in the `datapackage.json` file.

```{mermaid}
%%| label: fig-flow-update-resource-properties
%%| fig-cap: "Diagram showing the flow of objects and functions to update a resource's properties."
%%| fig-alt: "A flow diagram showing the steps to update resource properties."
flowchart
    resource_name[("string<br>(name of resource)")]
    properties_current[("ResourceProperties<br>(current)")]
    properties_updates[("ResourceProperties<br>(updates)")]
    properties_updated[("ResourceProperties<br>(updated)")]
    path_properties("path_properties()")
    update_resource_properties("update_resource_properties()")
    read_properties("read_properties()")
    get_resource_properties("get_resource_properties()")
    write_resource_properties("write_resource_properties()")
    check_resource_properties("check_resource_properties()")

    path_properties --> read_properties
    read_properties --> get_resource_properties
    get_resource_properties --> properties_current
    properties_current --> update_resource_properties
    properties_updates --> update_resource_properties
    update_resource_properties --> properties_updated
    properties_updated --> write_resource_properties
    path_properties --> write_resource_properties
    resource_name --> get_resource_properties
    properties_updated -.-> check_resource_properties
```

## Save new, added, or modified data to batch

A data resource needs data, not just properties. You can add data to any
data resource that has resource properties. Whenever data is added to a
data resource, it gets first saved in the `batch/` folder to keep track
of additions or changes. You add the data when:

-   A new data resource is created and data is added to it.
-   Additional data is added to an existing data resource.
-   You need to fix, update, or modify existing data in the resource by
    correcting the data (e.g. fixing a data entry issue).

The data must be in a tidy format and must have already been loaded in
as a Polars DataFrame.

```{mermaid}
%%| label: fig-flow-save-data-to-batch
%%| fig-cap: "Diagram showing the flow of objects and functions to save new, added, or modified data to a batch."
%%| fig-alt: "A flow diagram showing the steps to save new, added, or modified data to a batch."
flowchart
    data[("DataFrame<br>(original data)")]
    resource_properties[(ResourceProperties)]
    write_resource_batch("write_resource_batch()")
    check_data("check_data()")

    data --> write_resource_batch
    resource_properties --> write_resource_batch
    data -.-> check_data
    resource_properties -.-> check_data
```

## Create or re-create the resource data

The batch data files are used to keep track of changes to the data
without deleting the original data, while also keeping the data that
will be used clean and ready for analysis. With this flow, the batch data is
converted into the final resource data. These steps are split up so
that, if needed or desired, you can make modifications to the data
before it is written to the final resource data. While
`write_resource_data()` will call `check_data()` internally, it can also
be called separately to check the data before writing it to the final
resource data.

```{mermaid}
%%| label: fig-flow-create-resource-data
%%| fig-cap: "Diagram showing the flow of objects and functions to create or re-create the resource data."
%%| fig-alt: "A flow diagram showing the steps to create or re-create the resource data."
flowchart
    path_resource_batch_files("path_resource_batch_files()")
    read_resource_batches("read_resource_batches()")
    list_data[("List[DataFrame]")]
    join_resource_batches("join_resource_batches()")
    joined_data[(DataFrame)]
    write_resource_data("write_resource_data()")
    resource_properties[(ResourceProperties)]
    check_data("check_data()")

    path_resource_batch_files --> read_resource_batches
    read_resource_batches --> list_data
    list_data --> join_resource_batches
    join_resource_batches --> joined_data
    joined_data --> write_resource_data
    resource_properties --> write_resource_data
    joined_data -.-> check_data
    resource_properties -.-> check_data
```
