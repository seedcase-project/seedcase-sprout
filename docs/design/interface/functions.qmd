---
title: "Functions and classes"
callout-icon: false
callout-appearance: "minimal"
toc-depth: 2
---

```{=html}
<style>
    h3 {
        font-size: 1.1em;
    }
</style>
```

::: {.callout-important appearance="default" icon="true"}
We created this document mainly as a way to help us as a team all
understand and agree on what we're making and what needs to be worked
on. Which means that the descriptions and explanations of these
functions will likely change quite a bit and may even be deleted later
when they are no longer needed.
:::

Based on the [naming scheme](/docs/design/architecture/naming.qmd) and
the [Frictionless Data Package standard](https://datapackage.org), these
are the core external-facing functions in Sprout. See the
[Outputs](outputs.qmd) section for an overview and explanation of the
different outputs provided by Sprout.

There are some small differences between the naming scheme and the
functions described here:

1.  `edit` only ever edits the `datapackage.json` which contains the
    properties/metadata of the package or resource(s) but never edits
    the data itself. If there is a need for updates to the data itself,
    the user can update it by uploading a new file with the updates (as
    long as the primary keys like participant ID and time of collection
    are the same). We don't provide access for users to directly edit
    the data because we want to limit security risks as well as to
    maintain privacy and legal compliance.
2.  `add` only ever adds more data to an existing data resource and does
    not add any new metadata to the `datapackage.json`. Since Sprout
    contains the full Frictionless Data specification, using `edit` is
    enough to make updates to the existing properties found in the
    `datapackage.json` file.

Nearly all functions have a `path` argument. Depending on what the
function does, the path object will be different. Use the `path_*()`
functions to get the correct path object for the specific function. It's
designed this way to make it more flexible to where individual packages
and resources are stored and to make it a bit easier to write tests for
the functions. For a similar reason, most of the functions output either
a `dict` Python object, a custom `Properties` dataclass, or a path
object to make them easier to test.

Several of the functions have an argument called `properties`. The
properties argument is a list of key-value pairs (as a JSON-style `dict`
object), built using the `Properties` object, that describes the package
and resource(s) in the package. This metadata is stored in the
`datapackage.json` file and follows the Frictionless Data specification.

::: {.callout-important appearance="default" icon="true"}
Functions shown with a {{< var wip >}} icon are not yet implemented
while those with a {{< var done >}} icon are implemented.
:::

## Data package functions

### {{< var wip >}} `create_package_properties(properties, path)`

This is the first function to use to create a new data package. It
generates a template for the `datapackage.json` file where the user
needs to fill in required fields by providing the `properties` argument
using the helper `PackageProperties` class. Outputs a full Properties
object. Use `write_package_properties()` to store the properties to the
`datapackage.json` file.

### {{< var wip >}} `build_readme_text(properties)`

Using a template, this will build a README file with the contents of the
properties object in a human-readable format. Outputs a text string. Use
`write_text()` to save the text to the `README.md` file.

### {{< var done >}} `edit_package_properties(path, properties)`

See the help documentation with `help(edit_package_properties())` for
more details.

### {{< var wip >}} `delete_package(path, confirm)`

Completely delete a specific package and all it's data resources.
Because this action would be permanent, the `confirm` argument would
default to `false` so that the user needs to explicitly provide `true`
to the function argument as confirmation. This is done to prevent
accidental deletion. Outputs `true` if the deletion was successful.

### {{< var done >}} `write_package_properties(properties, path)`

See the help documentation with `help(write_package_properties)` for
more details.

## Data resource functions

### {{< var done >}} `create_resource_structure(path)`

See the help documentation with `help(create_resource_structure)` for
more details.

### {{< var done >}} `create_resource_properties(path, properties)`

See the help documentation with `help(create_resource_properties)` for
more details.

### {{< var wip >}} `write_resource_data_to_raw(data_path, resource_properties)`

See the help documentation with `help(write_resource_data_to_raw)` for
more details.

```{mermaid}
flowchart
    in_data_path[/data_path/]
    in_properties[/resource_properties/]
    function("write_resource_data_to_raw()")
    out[("{path}/{timestamp}-{uuid}.{ext}.csv")]
    in_data_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `build_resource_parquet(raw_files_path, resource_properties)`

See the help documentation with `help(build_resource_parquet)` for more
details.

```{mermaid}
flowchart
    in_raw_files_path[/raw_files_path/]
    in_properties[/resource_properties/]
    function("build_resource_parquet()")
    out[("./resources/{id}/data.parquet")]
    in_raw_files_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `edit_resource_properties(path, properties)`

Edit the properties of a resource in a package. The `properties`
argument must be a JSON object that follows the Frictionless Data
specification. Use the `path_properties()` function to provide the
correct path location. Outputs a JSON object only; use
`write_resource_properties()` to save the JSON object to the
`datapackage.json` file.

### {{< var wip >}} `delete_resource_raw_file(path, confirm)`

Use this to delete a raw file in the `raw/` folder of a resource. This
is useful if the file is no longer needed or if it is incorrect or had
an issue during the time when a user first added the file to a resource.
Use `path_resource_raw_files()` to select which file to delete from the
list of files found. Will only delete one file. The `confirm` argument
defaults to `false` so that the user needs to explicitly provide `true`
to the function argument as confirmation. This is done to prevent
accidental deletion. Outputs `true` if the deletion was successful.

### {{< var wip >}} `delete_resource_data(path, confirm)`

Delete all data (Parquet) and raw data of a specific resource. Use
`path_resource_raw()` to provide the correct path location. The
`confirm` argument defaults to `false` so that the user needs to
explicitly provide `true` to the function argument as confirmation. This
is done to prevent accidental deletion. Outputs `true` if the deletion
was successful. Use `delete_resource_properties()` to delete the the
associated properties/metadata for the resource.

### {{< var wip >}} `delete_resource_properties(path, confirm)`

Deletes all properties for a resource within the `datapackage.json`
file. Use `path_properties()` to provide the correct location for
`path`. The `confirm` argument defaults to `false` so that the user
needs to explicitly provide `true` to the function argument as
confirmation. This is done to prevent accidental deletion. Outputs
`true` if the deletion was successful.

### {{< var done >}} `write_resource_properties(properties, path)`

See the help documentation with `help(write_resource_properties)` for
more details.

### {{< var done >}} `extract_resource_properties(data_path)`

See the help documentation with `help(extract_resource_properties)` for
more details.

## Path functions

-   All of these functions output a path object.
-   The paths returned by all of these functions are paths that exist,
    so all include a `check_is_dir()` or `check_is_file()` check.
-   If the wrong `resource_id` is given, an error message will include a
    list of all the actual `resource_id`s for a specific package.

### {{< var done >}} `path_properties(path)`

See the help documentation with `help(path_properties)` for more
details.

### {{< var done >}} `path_resources()`

See the help documentation with `help(path_resources)` for more details.

### {{< var done >}} `path_resource(resource_id)`

See the help documentation with `help(path_resource)` for more details.

### {{< var done >}} `path_resource_raw(resource_id)`

See the help documentation with `help(path_resource_raw)` for more
details.

### {{< var done >}} `path_resource_raw_files(package_id, resource_id)`

See the help documentation with `help(path_resource_raw_files)` for more
details.

### {{< var done >}} `path_resource_data(package_id, resource_id)`

See the help documentation with `help(path_resource_data)` for more
details.

## Properties dataclasses

These dataclasses contain an explicit, structured set of official
properties defined within a data package. The main purpose of these is
to allow us to pass structured properties objects between functions.
They also enable users to create valid properties objects more easily
and get an overview of optional and required class fields.

### {{< var done >}} `PackageProperties`

See the help documentation with `help(PackageProperties())` for more
details on the properties.

## Properties functions

### {{< var wip >}} `read_properties(path)`

Reads the `datapackage.json` file, checks that is correct, and then
outputs a `PackageProperties` object.

## Helper functions

### {{< var wip >}} `pretty_json(json)`

Create a prettier, human readable version of a JSON object.

### {{< var wip >}} `write_text(text, path)`

Writes a text string to a file at the given path. Outputs the path
object of the created file.

## Observational unit functions

Observational unit is the level of detail on the entity (e.g. human,
animal, event) that the data was collected on. An example would be: A
person in a research study who came to the clinic in May 2024 to have
their blood collected and to fill out a survey.

### {{< var wip >}} `delete_participant_data()`

TODO.

## Multi-user environments

There are some functions that are useful in multi-user environments. For
example, where the user may need to know where the data structured by
Sprout is stored on the system.

All the below `path_*()` functions use `path_sprout_global()` internally
to get the global path as well as `package_id` and/or `resource_id` to
complete the correct path for the specific package/resource.

### {{< var done >}} `path_packages()`

See the help documentation with `help(path_packages)` for more details.

### {{< var done >}} `path_package(package_id)`

See the help documentation with `help(path_package)` for more details.

### {{< var done >}} `path_sprout_global()`

See the help documentation with `help(path_sprout_global)` for more
details.
