---
title: "Functions and classes"
toc-depth: 2
---

```{=html}
<style>
    h3 {
        font-size: 1.1em;
    }
</style>
```

::: callout-important
We created this document mainly as a way to help us as a team all
understand and agree on what we're making and what needs to be worked
on. Which means that the descriptions and explanations of these
functions will likely change quite a bit and may even be deleted later
when they are no longer needed.
:::

Based on the [naming scheme](/docs/design/architecture/naming.qmd) and
the [Frictionless Data Package standard](https://datapackage.org), these
are the core external-facing functions in Sprout. See the
[Outputs](outputs.qmd) section for an overview and explanation of the
different outputs provided by Sprout.

Nearly all functions have a `path` argument. Depending on what the
function does, the path object will be different. Use the `path_*()`
functions to get the correct path object for the specific function. It's
designed this way to make it more flexible to where individual packages
and resources are stored and to make it a bit easier to write tests for
the functions. For a similar reason, most of the functions output either
a `dict` Python object, a custom `Properties` dataclass, or a path
object to make them easier to test.

Several of the functions have an argument called `properties`. The
properties argument is a list of key-value pairs (as a JSON-style `dict`
object), built using the `Properties` object, that describes the package
and resource(s) in the package. This metadata is stored in the
`datapackage.json` file and follows the Frictionless Data specification.

`write_*()` functions will always overwrite the file and they
will always create the folders to the file if they don't exist.

::: callout-important
Functions shown with a {{< var wip >}} icon are not yet implemented
while those with a {{< var done >}} icon are implemented.
:::

::: callout-caution
For some reason, the diagrams below don't display well on some browsers
like Firefox. To see them, try using a different browser like Chrome or
Edge.
:::

## Data package functions


### {{< var done >}} `as_readme_text(properties)`

See the help documentation with `help(as_readme_text)` for more details.

```{mermaid}
flowchart
    in_properties[/properties/]
    function("as_readme_text()")
    out[("str")]
    in_properties --> function
    function --> out
```

### {{< var done >}} `update_package_properties(current_properties, update_properties)`

See the help documentation with `help(update_package_properties())` for
more details.

```{mermaid}
flowchart
    in_current[/current_properties/]
    in_updates[/update_properties/]
    function("update_package_properties()")
    out[("PackageProperties")]
    in_current --> function
    in_updates --> function
    function --> out
```

### {{< var done >}} `write_package_properties(properties, path)`

See the help documentation with `help(write_package_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/properties/]
    in_path[/path/]
    function("write_package_properties()")
    out[("Path: ./datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

## Data resource functions

### {{< var done >}} `write_resource_properties(resource_properties, path)`

See the help documentation with `help(write_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/resource_properties/]
    in_path[/path/]
    function("write_resource_properties()")
    out[("{path}/datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

### {{< var wip >}} `write_resource_batches(data, resource_properties)`

See the help documentation with `help(write_resource_batch)` for
more details.

```{mermaid}
flowchart
    in_data[/data/]
    in_properties[/resource_properties/]
    function("write_resource_batch()")
    out[("{path}/{timestamp}-{uuid}.parquet")]
    in_data --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `read_resource_batches(paths, resource_properties)`

See the help documentation with `help(read_resource_batches)` for more
details.

```{mermaid}
flowchart
    in_path[/paths/]
    in_properties[/resource_properties/]
    function("read_resource_batches()")
    out[("List[DataFrame]")]
    in_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `join_resource_batches(data_list, resource_properties)`

See the help documentation with `help(join_resource_batches)` for more
details.

```{mermaid}
flowchart
    in_data[/data_list/]
    in_properties[/resource_properties/]
    function("join_resource_batches()")
    out[("DataFrame")]
    in_data --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `write_resource_data(data, resource_properties)`

See the help documentation with `help(write_resource_data)` for more
details.

```{mermaid}
flowchart
    in_data[/data/]
    in_properties[/resource_properties/]
    function("write_resource_data()")
    out[("./resources/{name}/data.parquet")]
    in_data --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `update_resource_properties(current, updates)`

Edit the properties of a resource in a package. The `properties`
argument must be a `ResourceProperties` object. Use the
`path_properties()` function to provide the
correct path location. Outputs a `ResourceProperties` object; use
`write_resource_properties()` to save the properties object to the
`datapackage.json` file. This function can also be used to delete all of
a resource's properties.

```{mermaid}
flowchart
    in_path[/path/]
    in_properties[/resource_properties/]
    function("update_resource_properties()")
    out[("ResourceProperties")]
    in_path --> function
    in_properties --> function
    function --> out
```

### {{< var done >}} `write_resource_properties(resource_properties, path)`

See the help documentation with `help(write_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/resource_properties/]
    in_path[/path/]
    function("write_resource_properties()")
    out[("{path}/datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

### {{< var done >}} `extract_resource_properties(data)`

See the help documentation with `help(extract_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_data_path[/data/]
    function("extract_resource_properties()")
    out[("ResourceProperties")]
    in_data_path --> function
    function --> out
```

## Path functions

See the help documentation for `help(path)` for more details.

## Properties dataclasses

These dataclasses contain an explicit, structured set of official
properties defined within a data package. The main purpose of these is
to allow us to pass structured properties objects between functions.
They also enable users to create valid properties objects more easily
and get an overview of optional and required class fields.

### {{< var done >}} `PackageProperties`

See the help documentation with `help(PackageProperties())` for more
details on the properties.

## Properties functions

### {{< var done >}} `read_properties(path)`

See the help documentation with `help(read_properties)` for more details.

```{mermaid}
flowchart
    in_path[/path/]
    function("read_properties()")
    out[("PackageProperties")]
    in_path --> function
    function --> out
```

Reads the `datapackage.json` file, checks that it is correct, and then
outputs a `PackageProperties` object.

## Check functions

All the check functions check the properties given in the
`datapackage.json` file against the Frictionless Data Package standard.
Even the checks on the data itself are based on the properties given in
the `datapackage.json` file. The checks on the properties are mainly
wrappers around the `check_datapackage` "sub-package" (that we will
eventually split into its own package).

### {{< var done >}} `check_properties(properties)`

See the help documentation with `help(check_properties)` for more
details. This checks all the properties, both package and resources.

```{mermaid}
flowchart
    in_properties[/properties/]
    function("check_properties()")
    out[("PackageProperties<br>or Error")]
    in_properties --> function
    function --> out
```

### {{< var done >}} `check_package_properties(properties)`

See the help documentation with `help(check_package_properties)` for
more details. This *only* checks the package properties.

```{mermaid}
flowchart
    in_properties[/properties/]
    function("check_package_properties()")
    out[("PackageProperties<br>or Error")]
    in_properties --> function
    function --> out
```

### {{< var done >}} `check_resource_properties(resource_properties)`

See the help documentation with `help(check_resource_properties)` for
more details. The *only* checks the resource properties.

```{mermaid}
flowchart
    in_properties[/properties/]
    function("check_resource_properties()")
    out[("ResourceProperties<br>or Error")]
    in_properties --> function
    function --> out
```

### {{< var wip >}} `check_data(data, resource_properties)`

See the help documentation with `help(check_data)` for more details.
This function checks the data against the properties in the
`datapackage.json` file. It includes checks on the data headers against
the `field.name` properties, the columns' data types against the
`fields.type` properties, and the data itself against the constraints
given in the `fields.constraints` properties (if it exists). See the
[function flow](flows.qmd) for more details on the internal flow of this
particular function.

```{mermaid}
flowchart
    in_data[/data/]
    in_properties[/resource_properties/]
    function("check_data()")
    out[("DataFrame<br>or Error")]
    in_data --> function
    in_properties --> function
    function --> out
```

## Observational unit functions

Observational unit is the level of detail on the entity (e.g. human,
animal, event) that the data was collected on. An example would be: A
person in a research study who came to the clinic in May 2024 to have
their blood collected and to fill out a survey.

### {{< var wip >}} `delete_participant_data()`

TODO.

## Base functions

### {{< var done >}} `write_file(text, path)`

See the help documentation with `help(write_file)` for more details.

### {{< var wip >}} `delete_file(path, confirm)`

Given a path, delete that file. This is mostly a wrapper around standard
functions in Python. The `confirm` argument defaults to `false` so that
the user needs to explicitly provide `true` to the function argument as
confirmation. This is done to prevent accidental deletion. Outputs `true`
if the deletion was successful.

### {{< var wip >}} `delete_dir(path, confirm)`

Given a path, delete that directory and everything inside. This is mostly a
wrapper around standard functions in Python. The `confirm` argument defaults to
`false` so that the user needs to explicitly provide `true` to the function
argument as confirmation. This is done to prevent accidental deletion. Outputs
`true` if the deletion was successful.

## Multi-user environments

There are some functions that are useful in multi-user environments. For
example, where the user may need to know where the data structured by
Sprout is stored on the system.

All the below `path_*()` functions use `path_sprout_global()` internally
to get the global path as well as `package_id` and/or `resource_id` to
complete the correct path for the specific package/resource.

### {{< var done >}} `path_packages()`

See the help documentation with `help(path_packages)` for more details.

### {{< var done >}} `path_package(package_id)`

See the help documentation with `help(path_package)` for more details.

### {{< var done >}} `path_sprout_global()`

See the help documentation with `help(path_sprout_global)` for more
details.
