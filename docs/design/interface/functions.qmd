---
title: "Functions and classes"
toc-depth: 2
---

```{=html}
<style>
    h3 {
        font-size: 1.1em;
    }
</style>
```

::: callout-important
We created this document mainly as a way to help us as a team all
understand and agree on what we're making and what needs to be worked
on. Which means that the descriptions and explanations of these
functions will likely change quite a bit and may even be deleted later
when they are no longer needed.
:::

Based on the [naming scheme](/docs/design/architecture/naming.qmd) and
the [Frictionless Data Package standard](https://datapackage.org), these
are the core external-facing functions in Sprout. See the
[Outputs](outputs.qmd) section for an overview and explanation of the
different outputs provided by Sprout.

Nearly all functions have a `path` argument. Depending on what the
function does, the path object will be different. Use the `path_*()`
functions to get the correct path object for the specific function. It's
designed this way to make it more flexible to where individual packages
and resources are stored and to make it a bit easier to write tests for
the functions. For a similar reason, most of the functions output either
a `dict` Python object, a custom `Properties` dataclass, or a path
object to make them easier to test.

Several of the functions have an argument called `properties`. The
properties argument is a list of key-value pairs (as a JSON-style `dict`
object), built using the `Properties` object, that describes the package
and resource(s) in the package. This metadata is stored in the
`datapackage.json` file and follows the Frictionless Data specification.

::: callout-important
Functions shown with a {{< var wip >}} icon are not yet implemented
while those with a {{< var done >}} icon are implemented.
:::

::: callout-caution
For some reason, the diagrams below don't display well on some browsers like
Firefox. To see them, try using a different browser like Chrome or Edge.
:::

## Data package functions

### {{< var done >}} `create_package_properties(properties, path)`

See the help documentation with `help(create_package_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/properties/]
    in_path[/path/]
    function("create_package_properties()")
    out[("{path}/datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

### {{< var done >}} `build_readme_text(properties)`

See the help documentation with `help(build_readme_text)` for more
details.

```{mermaid}
flowchart
    in_properties[/properties/]
    function("build_readme_text()")
    out[("str")]
    in_properties --> function
    function --> out
```

### {{< var done >}} `update_package_properties(path, properties)`

See the help documentation with `help(update_package_properties())` for
more details.

```{mermaid}
flowchart
    in_path[/path/]
    in_properties[/properties/]
    function("update_package_properties()")
    out[("PackageProperties")]
    in_path --> function
    in_properties --> function
    function --> out
```

### {{< var done >}} `write_package_properties(properties, path)`

See the help documentation with `help(write_package_properties)` for
more details.

### {{< var wip >}} `delete_package(path, confirm)`

Completely delete a specific package and all it's data resources.
Because this action would be permanent, the `confirm` argument would
default to `false` so that the user needs to explicitly provide `true`
to the function argument as confirmation. This is done to prevent
accidental deletion. Outputs `true` if the deletion was successful.

## Data resource functions

### {{< var done >}} `create_resource_dirs(path)`

See the help documentation with `help(create_resource_dirs)` for
more details.

```{mermaid}
flowchart
    in_path[/path/]
    function("create_resource_dirs()")
    out[("{path}/resources/{id}/<br>{path}/resources/{id}/batch/")]
    in_path --> function
    function --> out
```

### {{< var done >}} `create_resource_properties(resource_properties, path)`

See the help documentation with `help(create_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/resource_properties/]
    in_path[/path/]
    function("create_resource_properties()")
    out[("{path}/datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

### {{< var wip >}} `write_resource_batch_data(data_path, resource_properties)`

See the help documentation with `help(write_resource_batch_data)` for
more details.

```{mermaid}
flowchart
    in_data_path[/data_path/]
    in_properties[/resource_properties/]
    function("write_resource_batch_data()")
    out[("{path}/{timestamp}-{uuid}.parquet")]
    in_data_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `build_resource_data(batch_files_path, resource_properties)`

See the help documentation with `help(build_resource_data)` for more
details.

```{mermaid}
flowchart
    in_batch_files_path[/batch_files_path/]
    in_properties[/resource_properties/]
    function("build_resource_data()")
    out[("Polars<br>DataFrame")]
    in_batch_files_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `write_resource_parquet(data, resource_properties)`

See the help documentation with `help(write_parquet)` for more
details.

```{mermaid}
flowchart
    in_data[/data/]
    in_properties[/resource_properties/]
    function("write_resource_parquet()")
    out[("./resources/{id}/data.parquet")]
    in_data --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `update_resource_properties(path, resource_properties)`

Edit the properties of a resource in a package. The `properties`
argument must be a `ResourceProperties` object. Use the
`path_properties()` function to provide the
correct path location. Outputs a `ResourceProperties` object; use
`write_resource_properties()` to save the properties object to the
`datapackage.json` file.

```{mermaid}
flowchart
    in_path[/path/]
    in_properties[/resource_properties/]
    function("update_resource_properties()")
    out[("ResourceProperties")]
    in_path --> function
    in_properties --> function
    function --> out
```

### {{< var wip >}} `delete_resource_batch_file(path, confirm)`

Use this to delete a batch file in the `batch/` folder of a resource. This
is useful if the file is no longer needed or if it is incorrect or had
an issue during the time when a user first added the file to a resource.
Use `path_resource_batch_files()` to select which file to delete from the
list of files found. Will only delete one file. The `confirm` argument
defaults to `false` so that the user needs to explicitly provide `true`
to the function argument as confirmation. This is done to prevent
accidental deletion. Outputs `true` if the deletion was successful.

### {{< var wip >}} `delete_resource_data(path, confirm)`

Delete all Parquet data and its batch data of a specific resource. Use
`path_resource_batch()` to provide the correct path location. The
`confirm` argument defaults to `false` so that the user needs to
explicitly provide `true` to the function argument as confirmation. This
is done to prevent accidental deletion. Outputs `true` if the deletion
was successful. Use `delete_resource_properties()` to delete the the
associated properties/metadata for the resource.

### {{< var wip >}} `delete_resource_properties(path, resource_id, confirm)`

Deletes all properties for a resource within the `datapackage.json`
file. Use `path_properties()` to provide the correct location for
`path`. The `confirm` argument defaults to `false` so that the user
needs to explicitly provide `true` to the function argument as
confirmation. This is done to prevent accidental deletion. Outputs
`true` if the deletion was successful.

### {{< var done >}} `write_resource_properties(resource_properties, path)`

See the help documentation with `help(write_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_properties[/resource_properties/]
    in_path[/path/]
    function("write_resource_properties()")
    out[("{path}/datapackage.json")]
    in_properties --> function
    in_path --> function
    function --> out
```

### {{< var done >}} `extract_resource_properties(data_path)`

See the help documentation with `help(extract_resource_properties)` for
more details.

```{mermaid}
flowchart
    in_data_path[/data_path/]
    function("extract_resource_properties()")
    out[("ResourceProperties")]
    in_data_path --> function
    function --> out
```

## Path functions

-   All of these functions output a path object.
-   All of these functions have an optional `path` argument that defaults to
    the current working directory.
-   The paths returned by all of these functions are paths that exist,
    so all include a `check_is_dir()` or `check_is_file()` check.
-   If the wrong `resource_id` is given, an error message will include a
    list of all the actual `resource_id`s for a specific package.

### {{< var done >}} `path_properties(path)`

See the help documentation with `help(path_properties)` for more
details.

### {{< var done >}} `path_resources(path)`

See the help documentation with `help(path_resources)` for more details.

### {{< var done >}} `path_resource(resource_id, path)`

See the help documentation with `help(path_resource)` for more details.

### {{< var done >}} `path_resource_batch(resource_id)`

See the help documentation with `help(path_resource_batch)` for more
details.

### {{< var done >}} `path_resource_batch_files(resource_id, path)`

See the help documentation with `help(path_resource_batch_files)` for more
details.

### {{< var done >}} `path_resource_data(resource_id, path)`

See the help documentation with `help(path_resource_data)` for more
details.

## Properties dataclasses

These dataclasses contain an explicit, structured set of official
properties defined within a data package. The main purpose of these is
to allow us to pass structured properties objects between functions.
They also enable users to create valid properties objects more easily
and get an overview of optional and required class fields.

### {{< var done >}} `PackageProperties`

See the help documentation with `help(PackageProperties())` for more
details on the properties.

## Properties functions

### {{< var wip >}} `read_properties(path)`

Reads the `datapackage.json` file, checks that is correct, and then
outputs a `PackageProperties` object.

## Helper functions

### {{< var wip >}} `pretty_json(json)`

Create a prettier, human readable version of a JSON object.

### {{< var done >}} `write_file(text, path)`

See the help documentation with `help(write_file)` for more details.

## Observational unit functions

An observational unit is the level of detail on the entity (e.g. human, animal,
event) that the data was collected on at a given point in time.  An example
would be: A person in a research study who came to the clinic in May 2024 to
have their blood collected and to fill out a survey.

### {{< var wip >}} `delete_observational_unit(data_list, observational_unit, confirm)`

As per legal and privacy regulations, a person can request that any personally
identifiable and sensitive data of theirs be deleted in the "right to be
forgotten" regulation. This function makes this process easier by searching for
all places where their data is stored in the data and deletes it. We
can not guarantee that all data is deleted in the history (e.g. backups) or in
projects that have used the data for research purposes, but the data will no
longer exist in the current data package and all subsequent uses of it.  This is
a highly destructive action, be certain everything is correct before running it.
When `confirm` is false, the function will do a dry-run and show what would be
deleted.

The data given must be a list of DataFrames, even if it is only a list of one DataFrame.
The `observational_unit` is a dictionary that contains the information about the
observational unit that needs to be deleted. The dictionary must contain one or more
primary keys that represent the observational unit in the data as well as the value
to delete. For example:

```python
# For one person with the ID "1234", even if there are multiple time-points
# of data for that person.
observational_unit = {"person_id": ["1234"]}

# For multiple people with the IDs "1234" and "5678"
observational_unit = {"person_id": ["1234", "5678"]}

# For one person with the IDs "1234" and date of collections "2024-05-01"
# and "2024-05-02"
observational_unit = {
    "person_id": ["1234"],
    "date_of_collection": ["2024-05-01", "2024-05-02"]
}
```

The function will search for all instances of the keys and values in the data and delete them.

```{mermaid}
flowchart
    in_data[/data_list/]
    in_observational_unit[/observational_unit/]
    in_confirm[/confirm/]
    function("delete_observational_unit()")
    out[("DataFrame")]
    in_data --> function
    in_confirm --> function
    in_observational_unit --> function
    function --> out
```


## Multi-user environments

There are some functions that are useful in multi-user environments. For
example, where the user may need to know where the data structured by
Sprout is stored on the system.

All the below `path_*()` functions use `path_sprout_global()` internally
to get the global path as well as `package_id` and/or `resource_id` to
complete the correct path for the specific package/resource.

### {{< var done >}} `path_packages()`

See the help documentation with `help(path_packages)` for more details.

### {{< var done >}} `path_package(package_id)`

See the help documentation with `help(path_package)` for more details.

### {{< var done >}} `path_sprout_global()`

See the help documentation with `help(path_sprout_global)` for more
details.
