---
title: "Naming of Things"
---

{{< include ../_wip.qmd >}}

## Philosophy and ideals

How we name things, both internally and user-facing, will be:

-   Simple: Keep the vocabulary simple and easy to understand
-   Composable: Can be combined with other names to imply intent
-   Predictable: Easy to guess and reason on, without needing to look up
    documentation
-   Reusable: Can be used across multiple contexts
-   Consistent: Remains the same across different contexts
-   Align with existing conventions: Follow widely-established standards
    and conventions

## User-facing content

The below naming scheme *only* applies to file paths, functions, URLS,
API endpoints, and command line interfaces that are exposed to or
associated with user-facing content. It does *not* apply to internal
content; see section below on naming for developer-facing content.

### Composing names

We'll compose names based on the objects we and our users interact with
as well as the actions taken on those objects. These objects and actions
are inspired by and align with the "core" language of working with data
called *CRUD* (Create Read Update Delete), common naming schemes used in
REST API applications or services (such as Github), as well as by the
vocabulary of the HTTP verbs (GET, POST, PUT, PATCH, and DELETE):

-   Types of objects Sprout interacts with: projects, data, and
    metadata.
-   Types of actions Sprout takes on those objects: create, view,
    update, and delete
-   Types of identifiers for specific items of objects (as numbers):
    data, metadata, and project identifiers.

To name things, we'll combine the above with the object name first,
followed by the action, with a natural heirarchy of "offspring" to the
objects. Based on these principles, we can derive a naming scheme. In
the scheme, objects and actions are ordered, with names occurring first
acting as a "parent" to later names. The names are separated by a symbol
based on its context:

-   `_` for Python function names.
-   `-` for file path names.
-   `/` for URLs and web API endpoint names (a `/` always begins each
    URL to act as a root, but never ends a URL).
-   for command line interface names.

Additional "rules" to the naming include:

-   When a naming scheme ends without an action, the default action is
    `view`.
-   Data objects do not have any `view` action, since we want to limit
    access to looking at raw data.

### Scheme

Based on the above principles, we have defined the following naming
scheme (here shown with `space` as separator):

```         
# View all projects
projects

# Create a new project
projects create

# View landing page of a specific project
projects <id> 

# Update or delete a specific project 
projects <id> update
projects <id> delete

# View all metadata objects of a specific project
projects <id> metadata

# Create a new metadata object with associated data in a 
# specific project
projects <id> metadata create
# This creates an associated data object at:
# projects <id> metadata <id> data

# View the landing page of a specific metadata object in 
# a specific project
projects <id> metadata <id>

# Update or delete metadata of a specific project
projects <id> metadata <id> update
projects <id> metadata <id> delete

# Update or delete data of a specific metadata object to 
# a specific project
projects <id> metadata <id> data update
projects <id> metadata <id> data delete
```

## Developer-facing (internal) content

### Python functions

Following the same naming schemes for CRUD, HTTP verbs, and common REST
API endpoints, these are some guidelines on the general words to use for
actions and objects:

-   Actions: get/list, update/edit, delete/remove, create,
    convert/transform/modify, extract, validate/check/verify/is, read,
    write, as/to
-   Objects: array (analogous to non-nested Lists, Sets, and Series (in
    Pandas/Polars) in Python), lists (analogous to nested Lists, Tuples,
    and Dictionaries in Python or Tables in SQL), files, classes

Some general guidelines when naming things in Python:

-   Functions:
    -   Use `snake_case()`.
    -   Prefer a single action verb for functions: `action()`.
    -   Use the arguments to specify the object: `action(object=)`.
    -   If necessary, include the object in the name following the
        pattern `action_object()`.
    -   If the object is in the name, prefer the plural form of the
        object if the function could return multiple items of an object.
    -   If the object is in the name, prefer a single object name rather
        than multiple.
-   Methods (includes everything from the functions):
    -   Prefer action verbs only: `ClassName.action()`.
-   Classes:
    -   Use `PascalCase`.
    -   Use objects as the class name: `Object`.
    -   Prefer the plural form of the object name: `Objects`.
    -   Prefer a single object name (`Objects`) rather than multiple
        (`TwoObjects`).
-   Variables (of any type):
    -   Use `snake_case`.
    -   Prefer a plural form for objects if they *could* contain more
        than one item.
    -   Use singular form *only* if the object *must* only contain one
        item.
    -   If an action name is necessary, prefix action verb in the past
        tense: `actioned_object`.
-   Arguments (includes everything from the variables above):
    -   Prefer single object names rather than actions: `object`.
    -   Prefer the plural form: `objects`.
    -   Use singular form *only* if the function or method input *must*
        only contain one item.