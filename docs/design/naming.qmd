---
title: "Naming of Things"
---

{{< include ../_wip.qmd >}}

## Philosophy and ideals

How we name things, both internally and user-facing, will be:

- Simple: Keep the vocabulary simple and easy to understand
- Composable: Can be combined with other names to imply intent
- Predictable: Easy to guess and reason on, without needing to look up documentation
- Reusable: Can be used across multiple contexts
- Consistent: Remains the same across different contexts
- Align with existing conventions: Follow widely-established standards and conventions

## Composing names

We'll compose names based on the objects we and our users interact with as well
as the actions taken on those objects. These objects and actions are inspired by 
the "core" language of working with data called *CRUD* (Create Read Update Delete) as
well as by the vocabulary of the HTTP verbs (GET, POST, PUT, PATCH, and DELETE):

- Types of objects Sprout interacts with: projects, data, and metadata.
- Types of actions Sprout takes on those objects: create, view (or list), edit (or update), delete, and upload.
- Types of identifiers for specific items of objects (as numbers or text): data, metadata, and project identifiers.

To name things, we'll combine the above with the object name first, followed by the
action, with a natural heirarchy and "ownership" to the objects. Based on these
principles, we can derive a naming scheme. In the scheme, objects and actions 
are ordered, with names occurring first acting as a "parent" to later
names. The names are separated by a symbol based on its context:

- `_` for Python function names.
- `-` for file path names.
- `/` for URLs and web API endpoint names (a `/` always begins each URL to act as a root, but never ends a URL).
- ` ` for command line interface names.

## Scheme

Based on the above principles, we have defined the following naming scheme (here shown with `space` as separator):

```
# View all projects
projects view

# View landing page of a specific project
projects <id> view

# View, create, or edit metadata for a specific project 
projects <id> metadata view
projects <id> metadata create
projects <id> metadata edit

# View all data objects of a specific project
projects <id> data view

# View, create, edit, or upload metadata of a specific data 
# object in a specific project
projects <id> data <id> metadata view
projects <id> data <id> metadata create
projects <id> data <id> metadata edit
projects <id> data <id> metadata upload

# View landing page of a specific data object in 
# a specific project
projects <id> data <id> view

# Create data for, edit data of, or upload data to a specific data 
# object in a specific project
projects <id> data <id> edit
projects <id> data <id> upload
```

Where `<id>` is a placeholder for a number for the identifier of it's
parent object. `view` could be the default action when an object is given
without an action.  For instance, these could be equivalent:

```
projects <id>
projects <id> view

# Or
projects <id> data <id>
projects <id> data <id> view
```

There are a few combinations that are duplicates and could be considered
equivalent. Specifically:

```
# These could be equivalent
projects <id> create
projects <id> metadata create

# These could be equivalent
projects <id> edit
projects <id> metadata edit

# These could be equivalent
projects <id> data <id> view
projects <id> data <id> metadata view

# These could be equivalent
projects <id> data <id> create
projects <id> data <id> metadata create
```
