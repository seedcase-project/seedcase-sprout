# generated by datamodel-codegen:
#   filename:  https://datapackage.org/profiles/2.0/datapackage.json
#   timestamp: 2024-09-12T12:02:15+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Any, Dict, List


@dataclass
class Contributor:
    """
    A contributor to this descriptor.
    """

    title: str | None = None
    """
    A human-readable title.
    """
    path: str | None = None
    """
    A fully qualified URL, or a POSIX file path.
    """
    email: str | None = None
    """
    An email address.
    """
    given_name: str | None = None
    family_name: str | None = None
    organization: str | None = None
    """
    An organizational affiliation for this contributor.
    """
    roles: List[str] | None = None


@dataclass
class License:
    """
    A license for this descriptor.
    """

    name: str
    """
    MUST be an Open Definition license identifier, see http://licenses.opendefinition.org/
    """
    path: str | None = None
    """
    A fully qualified URL, or a POSIX file path.
    """
    title: str | None = None
    """
    A human-readable title.
    """


@dataclass
class License1:
    """
    A license for this descriptor.
    """

    path: str
    """
    A fully qualified URL, or a POSIX file path.
    """
    name: str | None = None
    """
    MUST be an Open Definition license identifier, see http://licenses.opendefinition.org/
    """
    title: str | None = None
    """
    A human-readable title.
    """


Path = str


class Type(Enum):
    table = "table"


@dataclass
class Source:
    """
    A source file.
    """

    title: str | None = None
    """
    A human-readable title.
    """
    path: str | None = None
    """
    A fully qualified URL, or a POSIX file path.
    """
    email: str | None = None
    """
    An email address.
    """
    version: str | None = None


@dataclass
class License2(License):
    """
    A license for this descriptor.
    """


@dataclass
class License3(License1):
    """
    A license for this descriptor.
    """


class ItemType(Enum):
    array = "array"
    object = "object"


@dataclass
class TableDialect:
    """
    The Table dialect descriptor.
    """

    field_schema: str | None = "https://datapackage.org/profiles/1.0/tabledialect.json"
    """
    The profile of this descriptor.
    """
    header: bool | None = True
    """
    Specifies if the file includes a header row, always as the first row in the file.
    """
    header_rows: List[int] | None = field(default_factory=lambda: [1])
    header_join: str | None = " "
    comment_rows: List[int] | None = field(default_factory=lambda: [1])
    comment_char: str | None = None
    """
    Specifies that any row beginning with this one-character string, without preceeding whitespace, causes the entire line to be ignored.
    """
    delimiter: str | None = ","
    """
    A character sequence to use as the field separator.
    """
    line_terminator: str | None = "\r\n"
    """
    Specifies the character sequence that must be used to terminate rows.
    """
    quote_char: str | None = '"'
    """
    Specifies a one-character string to use as the quoting character.
    """
    double_quote: bool | None = True
    """
    Specifies the handling of quotes inside fields.
    """
    escape_char: str | None = None
    """
    Specifies a one-character string to use as the escape character.
    """
    null_sequence: str | None = None
    """
    Specifies the null sequence, for example, `\N`.
    """
    skip_initial_space: bool | None = False
    """
    Specifies the interpretation of whitespace immediately following a delimiter. If false, whitespace immediately after a delimiter should be treated as part of the subsequent field.
    """
    property: str | None = None
    item_type: ItemType | None = None
    item_keys: List[str] | None = None
    sheet_number: int | None = None
    sheet_name: str | None = None
    table: str | None = None


@dataclass
class MissingValue:
    value: str
    label: str | None = None


@dataclass
class Category(MissingValue):
    pass


class Type1(Enum):
    """
    The type keyword, which `MUST` be a value of `string`.
    """

    string = "string"


class Format(Enum):
    """
    The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.
    """

    default = "default"
    email = "email"
    uri = "uri"
    binary = "binary"
    uuid = "uuid"


@dataclass
class Constraints:
    """
    The following constraints are supported for `string` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    pattern: str | None = None
    """
    A regular expression pattern to test each value of the property against, where a truthy response indicates validity.
    """
    enum: List[str] | None = None
    min_length: int | None = None
    """
    An integer that specifies the minimum length of a value.
    """
    max_length: int | None = None
    """
    An integer that specifies the maximum length of a value.
    """


@dataclass
class StringField:
    """
    The field contains strings, that is, sequences of characters.
    """

    name: str
    """
    A name for this field.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    categories: List[str] | List[Category] | None = None
    categories_ordered: bool | None = None
    type: Type1 | None = None
    """
    The type keyword, which `MUST` be a value of `string`.
    """
    format: Format | None = Format.default
    """
    The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.
    """
    constraints: Constraints | None = None
    """
    The following constraints are supported for `string` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type2(Enum):
    """
    The type keyword, which `MUST` be a value of `number`.
    """

    number = "number"


class Format1(Enum):
    """
    There are no format keyword options for `number`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints1:
    """
    The following constraints are supported for `number` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[float] | None = None
    minimum: str | float | None = None
    maximum: str | float | None = None
    exclusive_minimum: str | float | None = None
    exclusive_maximum: str | float | None = None


@dataclass
class NumberField:
    """
    The field contains numbers of any kind including decimals.
    """

    name: str
    """
    A name for this field.
    """
    type: Type2
    """
    The type keyword, which `MUST` be a value of `number`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format1 | None = Format1.default
    """
    There are no format keyword options for `number`: only `default` is allowed.
    """
    bare_number: bool | None = True
    """
    a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `â‚¬95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.
    """
    group_char: str | None = None
    """
    A string whose value is used to group digits within the number. This property does not have a default value. A common value is `,` e.g. '100,000'.
    """
    decimal_char: str | None = None
    """
    A string whose value is used to represent a decimal point within the number. The default value is `.`.
    """
    constraints: Constraints1 | None = None
    """
    The following constraints are supported for `number` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Category1:
    value: int
    label: str | None = None


class Type3(Enum):
    """
    The type keyword, which `MUST` be a value of `integer`.
    """

    integer = "integer"


class Format2(Enum):
    """
    There are no format keyword options for `integer`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints2:
    """
    The following constraints are supported for `integer` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[int] | None = None
    minimum: str | int | None = None
    maximum: str | int | None = None
    exclusive_minimum: str | int | None = None
    exclusive_maximum: str | int | None = None


@dataclass
class IntegerField:
    """
    The field contains integers - that is whole numbers.
    """

    name: str
    """
    A name for this field.
    """
    type: Type3
    """
    The type keyword, which `MUST` be a value of `integer`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    categories: List[int] | List[Category1] | None = None
    categories_ordered: bool | None = None
    format: Format2 | None = Format2.default
    """
    There are no format keyword options for `integer`: only `default` is allowed.
    """
    bare_number: bool | None = True
    """
    a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `â‚¬95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.
    """
    group_char: str | None = None
    """
    A string whose value is used to group digits within the number. This property does not have a default value. A common value is `,` e.g. '100,000'.
    """
    constraints: Constraints2 | None = None
    """
    The following constraints are supported for `integer` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type4(Enum):
    """
    The type keyword, which `MUST` be a value of `date`.
    """

    date = "date"


@dataclass
class Constraints3:
    """
    The following constraints are supported for `date` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | None = None
    minimum: str | None = None
    maximum: str | None = None
    exclusive_minimum: str | None = None
    exclusive_maximum: str | None = None


@dataclass
class DateField:
    """
    The field contains temporal date values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type4
    """
    The type keyword, which `MUST` be a value of `date`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `date` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints3 | None = None
    """
    The following constraints are supported for `date` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type5(Enum):
    """
    The type keyword, which `MUST` be a value of `time`.
    """

    time = "time"


@dataclass
class Constraints4:
    """
    The following constraints are supported for `time` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | None = None
    minimum: str | None = None
    maximum: str | None = None
    exclusive_minimum: str | None = None
    exclusive_maximum: str | None = None


@dataclass
class TimeField:
    """
    The field contains temporal time values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type5
    """
    The type keyword, which `MUST` be a value of `time`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `time` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints4 | None = None
    """
    The following constraints are supported for `time` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type6(Enum):
    """
    The type keyword, which `MUST` be a value of `datetime`.
    """

    datetime = "datetime"


@dataclass
class Constraints5:
    """
    The following constraints are supported for `datetime` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | None = None
    minimum: str | None = None
    maximum: str | None = None
    exclusive_minimum: str | None = None
    exclusive_maximum: str | None = None


@dataclass
class DateTimeField:
    """
    The field contains temporal datetime values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type6
    """
    The type keyword, which `MUST` be a value of `datetime`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `datetime` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints5 | None = None
    """
    The following constraints are supported for `datetime` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type7(Enum):
    """
    The type keyword, which `MUST` be a value of `year`.
    """

    year = "year"


class Format3(Enum):
    """
    There are no format keyword options for `year`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints6:
    """
    The following constraints are supported for `year` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[int] | None = None
    minimum: str | int | None = None
    maximum: str | int | None = None
    exclusive_minimum: str | int | None = None
    exclusive_maximum: str | int | None = None


@dataclass
class YearField:
    """
    A calendar year, being an integer with 4 digits. Equivalent to [gYear in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYear)
    """

    name: str
    """
    A name for this field.
    """
    type: Type7
    """
    The type keyword, which `MUST` be a value of `year`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format3 | None = Format3.default
    """
    There are no format keyword options for `year`: only `default` is allowed.
    """
    constraints: Constraints6 | None = None
    """
    The following constraints are supported for `year` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type8(Enum):
    """
    The type keyword, which `MUST` be a value of `yearmonth`.
    """

    yearmonth = "yearmonth"


class Format4(Enum):
    """
    There are no format keyword options for `yearmonth`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints7:
    """
    The following constraints are supported for `yearmonth` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | None = None
    minimum: str | None = None
    maximum: str | None = None
    exclusive_minimum: str | None = None
    exclusive_maximum: str | None = None


@dataclass
class YearMonthField:
    """
    A calendar year month, being an integer with 1 or 2 digits. Equivalent to [gYearMonth in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYearMonth)
    """

    name: str
    """
    A name for this field.
    """
    type: Type8
    """
    The type keyword, which `MUST` be a value of `yearmonth`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format4 | None = Format4.default
    """
    There are no format keyword options for `yearmonth`: only `default` is allowed.
    """
    constraints: Constraints7 | None = None
    """
    The following constraints are supported for `yearmonth` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type9(Enum):
    """
    The type keyword, which `MUST` be a value of `boolean`.
    """

    boolean = "boolean"


class Format5(Enum):
    """
    There are no format keyword options for `boolean`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints8:
    """
    The following constraints are supported for `boolean` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    enum: List[bool] | None = None


@dataclass
class BooleanField:
    """
    The field contains boolean (true/false) data.
    """

    name: str
    """
    A name for this field.
    """
    type: Type9
    """
    The type keyword, which `MUST` be a value of `boolean`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format5 | None = Format5.default
    """
    There are no format keyword options for `boolean`: only `default` is allowed.
    """
    true_values: List[str] | None = field(
        default_factory=lambda: ["true", "True", "TRUE", "1"]
    )
    false_values: List[str] | None = field(
        default_factory=lambda: ["false", "False", "FALSE", "0"]
    )
    constraints: Constraints8 | None = None
    """
    The following constraints are supported for `boolean` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type10(Enum):
    """
    The type keyword, which `MUST` be a value of `object`.
    """

    object = "object"


class Format6(Enum):
    """
    There are no format keyword options for `object`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints9:
    """
    The following constraints apply for `object` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[Dict[str, Any]] | None = None
    min_length: int | None = None
    """
    An integer that specifies the minimum length of a value.
    """
    max_length: int | None = None
    """
    An integer that specifies the maximum length of a value.
    """
    json_schema: Dict[str, Any] | None = None
    """
    A valid JSON Schema object to validate field values. If a field value conforms to the provided JSON Schema then this field value is valid.
    """


@dataclass
class ObjectField:
    """
    The field contains data which can be parsed as a valid JSON object.
    """

    name: str
    """
    A name for this field.
    """
    type: Type10
    """
    The type keyword, which `MUST` be a value of `object`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format6 | None = Format6.default
    """
    There are no format keyword options for `object`: only `default` is allowed.
    """
    constraints: Constraints9 | None = None
    """
    The following constraints apply for `object` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type11(Enum):
    """
    The type keyword, which `MUST` be a value of `geopoint`.
    """

    geopoint = "geopoint"


class Format7(Enum):
    """
    The format keyword options for `geopoint` are `default`,`array`, and `object`.
    """

    default = "default"
    array = "array"
    object = "object"


@dataclass
class Constraints10:
    """
    The following constraints are supported for `geopoint` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[List] | List[Dict[str, Any]] | None = None


@dataclass
class GeoPointField:
    """
    The field contains data describing a geographic point.
    """

    name: str
    """
    A name for this field.
    """
    type: Type11
    """
    The type keyword, which `MUST` be a value of `geopoint`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format7 | None = Format7.default
    """
    The format keyword options for `geopoint` are `default`,`array`, and `object`.
    """
    constraints: Constraints10 | None = None
    """
    The following constraints are supported for `geopoint` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type12(Enum):
    """
    The type keyword, which `MUST` be a value of `geojson`.
    """

    geojson = "geojson"


class Format8(Enum):
    """
    The format keyword options for `geojson` are `default` and `topojson`.
    """

    default = "default"
    topojson = "topojson"


@dataclass
class Constraints11:
    """
    The following constraints are supported for `geojson` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[Dict[str, Any]] | None = None
    min_length: int | None = None
    """
    An integer that specifies the minimum length of a value.
    """
    max_length: int | None = None
    """
    An integer that specifies the maximum length of a value.
    """


@dataclass
class GeoJSONField:
    """
    The field contains a JSON object according to GeoJSON or TopoJSON
    """

    name: str
    """
    A name for this field.
    """
    type: Type12
    """
    The type keyword, which `MUST` be a value of `geojson`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format8 | None = Format8.default
    """
    The format keyword options for `geojson` are `default` and `topojson`.
    """
    constraints: Constraints11 | None = None
    """
    The following constraints are supported for `geojson` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type13(Enum):
    """
    The type keyword, which `MUST` be a value of `array`.
    """

    array = "array"


class Format9(Enum):
    """
    There are no format keyword options for `array`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints12:
    """
    The following constraints apply for `array` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | List[List] | None = None
    min_length: int | None = None
    """
    An integer that specifies the minimum length of a value.
    """
    max_length: int | None = None
    """
    An integer that specifies the maximum length of a value.
    """
    json_schema: Dict[str, Any] | None = None
    """
    A valid JSON Schema object to validate field values. If a field value conforms to the provided JSON Schema then this field value is valid.
    """


@dataclass
class ArrayField:
    """
    The field contains data which can be parsed as a valid JSON array.
    """

    name: str
    """
    A name for this field.
    """
    type: Type13
    """
    The type keyword, which `MUST` be a value of `array`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format9 | None = Format9.default
    """
    There are no format keyword options for `array`: only `default` is allowed.
    """
    constraints: Constraints12 | None = None
    """
    The following constraints apply for `array` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type14(Enum):
    """
    The type keyword, which `MUST` be a value of `duration`.
    """

    duration = "duration"


class Format10(Enum):
    """
    There are no format keyword options for `duration`: only `default` is allowed.
    """

    default = "default"


@dataclass
class Constraints13:
    """
    The following constraints are supported for `duration` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List[str] | None = None
    minimum: str | None = None
    maximum: str | None = None
    exclusive_minimum: str | None = None
    exclusive_maximum: str | None = None


@dataclass
class DurationField:
    """
    The field contains a duration of time.
    """

    name: str
    """
    A name for this field.
    """
    type: Type14
    """
    The type keyword, which `MUST` be a value of `duration`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format10 | None = Format10.default
    """
    There are no format keyword options for `duration`: only `default` is allowed.
    """
    constraints: Constraints13 | None = None
    """
    The following constraints are supported for `duration` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


class Type15(Enum):
    """
    The type keyword, which `MUST` be a value of `any`.
    """

    any = "any"


@dataclass
class Constraints14:
    """
    The following constraints apply to `any` fields.
    """

    required: bool | None = None
    """
    Indicates whether a property must have a value for each instance.
    """
    unique: bool | None = None
    """
    When `true`, each value for the property `MUST` be unique.
    """
    enum: List | None = None


@dataclass
class AnyField:
    """
    Any value is accepted, including values that are not captured by the type/format/constraint requirements of the specification.
    """

    name: str
    """
    A name for this field.
    """
    type: Type15
    """
    The type keyword, which `MUST` be a value of `any`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    constraints: Constraints14 | None = None
    """
    The following constraints apply to `any` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


UniqueKey = List[str]


@dataclass
class Reference:
    fields: List[str]
    resource: str | None = None


@dataclass
class TableSchemaForeignKey:
    """
    Table Schema Foreign Key
    """

    fields: List[str]
    reference: Reference


@dataclass
class Reference1:
    fields: str
    resource: str | None = None


@dataclass
class TableSchemaForeignKey1:
    """
    Table Schema Foreign Key
    """

    fields: str
    """
    Fields that make up the primary key.
    """
    reference: Reference1


@dataclass
class TableSchema:
    """
    A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.
    """

    fields: List[
        StringField
        | NumberField
        | IntegerField
        | DateField
        | TimeField
        | DateTimeField
        | YearField
        | YearMonthField
        | BooleanField
        | ObjectField
        | GeoPointField
        | GeoJSONField
        | ArrayField
        | DurationField
        | AnyField
    ]
    """
    An `array` of Table Schema Field objects.
    """
    field_schema: str | None = "https://datapackage.org/profiles/1.0/tableschema.json"
    """
    The profile of this descriptor.
    """
    fields_match: List | None = None
    primary_key: List[str] | str | None = None
    """
    A primary key is a field name or an array of field names, whose values `MUST` uniquely identify each row in the table.
    """
    unique_keys: List[UniqueKey] | None = None
    foreign_keys: List[TableSchemaForeignKey | TableSchemaForeignKey1] | None = None
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """


@dataclass
class DataResource:
    """
    Data Resource.
    """

    name: str
    """
    An identifier string.
    """
    data: Any
    """
    Inline data for this resource.
    """
    field_schema: str | None = "https://datapackage.org/profiles/1.0/dataresource.json"
    """
    The profile of this descriptor.
    """
    path: str | List[Path] | None = None
    """
    A reference to the data for this resource, as either a path as a string, or an array of paths as strings. of valid URIs.
    """
    type: Type | None = None
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    homepage: str | None = None
    """
    The home on the web that is related to this data package.
    """
    sources: List[Source] | None = None
    """
    The raw sources for this resource.
    """
    licenses: List[License2 | License3] | None = None
    """
    The license(s) under which the resource is published.
    """
    format: str | None = None
    """
    The file format of this resource.
    """
    mediatype: str | None = None
    """
    The media type of this resource. Can be any valid media type listed with [IANA](https://www.iana.org/assignments/media-types/media-types.xhtml).
    """
    encoding: str | None = "utf-8"
    """
    The file encoding of this resource.
    """
    bytes: int | None = None
    """
    The size of this resource in bytes.
    """
    hash: str | None = None
    """
    The MD5 hash of this resource. Indicate other hashing algorithms with the {algorithm}:{hash} format.
    """
    dialect: TableDialect | None = None
    """
    The Table dialect descriptor.
    """
    schema_: TableSchema | None = None
    """
    A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.
    """


@dataclass
class License4(License):
    """
    A license for this descriptor.
    """


@dataclass
class License5(License1):
    """
    A license for this descriptor.
    """


@dataclass
class TableDialect1(TableDialect):
    """
    The Table dialect descriptor.
    """


@dataclass
class Category2(MissingValue):
    pass


@dataclass
class Constraints15(Constraints):
    """
    The following constraints are supported for `string` fields.
    """


@dataclass
class StringField1:
    """
    The field contains strings, that is, sequences of characters.
    """

    name: str
    """
    A name for this field.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    categories: List[str] | List[Category2] | None = None
    categories_ordered: bool | None = None
    type: Type1 | None = None
    """
    The type keyword, which `MUST` be a value of `string`.
    """
    format: Format | None = Format.default
    """
    The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.
    """
    constraints: Constraints15 | None = None
    """
    The following constraints are supported for `string` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints16(Constraints1):
    """
    The following constraints are supported for `number` fields.
    """


@dataclass
class NumberField1:
    """
    The field contains numbers of any kind including decimals.
    """

    name: str
    """
    A name for this field.
    """
    type: Type2
    """
    The type keyword, which `MUST` be a value of `number`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format1 | None = Format1.default
    """
    There are no format keyword options for `number`: only `default` is allowed.
    """
    bare_number: bool | None = True
    """
    a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `â‚¬95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.
    """
    group_char: str | None = None
    """
    A string whose value is used to group digits within the number. This property does not have a default value. A common value is `,` e.g. '100,000'.
    """
    decimal_char: str | None = None
    """
    A string whose value is used to represent a decimal point within the number. The default value is `.`.
    """
    constraints: Constraints16 | None = None
    """
    The following constraints are supported for `number` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Category3(Category1):
    pass


@dataclass
class Constraints17(Constraints2):
    """
    The following constraints are supported for `integer` fields.
    """


@dataclass
class IntegerField1:
    """
    The field contains integers - that is whole numbers.
    """

    name: str
    """
    A name for this field.
    """
    type: Type3
    """
    The type keyword, which `MUST` be a value of `integer`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    categories: List[int] | List[Category3] | None = None
    categories_ordered: bool | None = None
    format: Format2 | None = Format2.default
    """
    There are no format keyword options for `integer`: only `default` is allowed.
    """
    bare_number: bool | None = True
    """
    a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `â‚¬95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.
    """
    group_char: str | None = None
    """
    A string whose value is used to group digits within the number. This property does not have a default value. A common value is `,` e.g. '100,000'.
    """
    constraints: Constraints17 | None = None
    """
    The following constraints are supported for `integer` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints18(Constraints3):
    """
    The following constraints are supported for `date` fields.
    """


@dataclass
class DateField1:
    """
    The field contains temporal date values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type4
    """
    The type keyword, which `MUST` be a value of `date`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `date` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints18 | None = None
    """
    The following constraints are supported for `date` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints19(Constraints4):
    """
    The following constraints are supported for `time` fields.
    """


@dataclass
class TimeField1:
    """
    The field contains temporal time values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type5
    """
    The type keyword, which `MUST` be a value of `time`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `time` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints19 | None = None
    """
    The following constraints are supported for `time` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints20(Constraints5):
    """
    The following constraints are supported for `datetime` fields.
    """


@dataclass
class DateTimeField1:
    """
    The field contains temporal datetime values.
    """

    name: str
    """
    A name for this field.
    """
    type: Type6
    """
    The type keyword, which `MUST` be a value of `datetime`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Any | None = "default"
    """
    The format keyword options for `datetime` are `default`, `any`, and `{PATTERN}`.
    """
    constraints: Constraints20 | None = None
    """
    The following constraints are supported for `datetime` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints21(Constraints6):
    """
    The following constraints are supported for `year` fields.
    """


@dataclass
class YearField1:
    """
    A calendar year, being an integer with 4 digits. Equivalent to [gYear in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYear)
    """

    name: str
    """
    A name for this field.
    """
    type: Type7
    """
    The type keyword, which `MUST` be a value of `year`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format3 | None = Format3.default
    """
    There are no format keyword options for `year`: only `default` is allowed.
    """
    constraints: Constraints21 | None = None
    """
    The following constraints are supported for `year` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints22(Constraints7):
    """
    The following constraints are supported for `yearmonth` fields.
    """


@dataclass
class YearMonthField1:
    """
    A calendar year month, being an integer with 1 or 2 digits. Equivalent to [gYearMonth in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYearMonth)
    """

    name: str
    """
    A name for this field.
    """
    type: Type8
    """
    The type keyword, which `MUST` be a value of `yearmonth`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format4 | None = Format4.default
    """
    There are no format keyword options for `yearmonth`: only `default` is allowed.
    """
    constraints: Constraints22 | None = None
    """
    The following constraints are supported for `yearmonth` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints23(Constraints8):
    """
    The following constraints are supported for `boolean` fields.
    """


@dataclass
class BooleanField1:
    """
    The field contains boolean (true/false) data.
    """

    name: str
    """
    A name for this field.
    """
    type: Type9
    """
    The type keyword, which `MUST` be a value of `boolean`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format5 | None = Format5.default
    """
    There are no format keyword options for `boolean`: only `default` is allowed.
    """
    true_values: List[str] | None = field(
        default_factory=lambda: ["true", "True", "TRUE", "1"]
    )
    false_values: List[str] | None = field(
        default_factory=lambda: ["false", "False", "FALSE", "0"]
    )
    constraints: Constraints23 | None = None
    """
    The following constraints are supported for `boolean` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints24(Constraints9):
    """
    The following constraints apply for `object` fields.
    """


@dataclass
class ObjectField1:
    """
    The field contains data which can be parsed as a valid JSON object.
    """

    name: str
    """
    A name for this field.
    """
    type: Type10
    """
    The type keyword, which `MUST` be a value of `object`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format6 | None = Format6.default
    """
    There are no format keyword options for `object`: only `default` is allowed.
    """
    constraints: Constraints24 | None = None
    """
    The following constraints apply for `object` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints25(Constraints10):
    """
    The following constraints are supported for `geopoint` fields.
    """


@dataclass
class GeoPointField1:
    """
    The field contains data describing a geographic point.
    """

    name: str
    """
    A name for this field.
    """
    type: Type11
    """
    The type keyword, which `MUST` be a value of `geopoint`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format7 | None = Format7.default
    """
    The format keyword options for `geopoint` are `default`,`array`, and `object`.
    """
    constraints: Constraints25 | None = None
    """
    The following constraints are supported for `geopoint` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints26(Constraints11):
    """
    The following constraints are supported for `geojson` fields.
    """


@dataclass
class GeoJSONField1:
    """
    The field contains a JSON object according to GeoJSON or TopoJSON
    """

    name: str
    """
    A name for this field.
    """
    type: Type12
    """
    The type keyword, which `MUST` be a value of `geojson`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format8 | None = Format8.default
    """
    The format keyword options for `geojson` are `default` and `topojson`.
    """
    constraints: Constraints26 | None = None
    """
    The following constraints are supported for `geojson` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints27(Constraints12):
    """
    The following constraints apply for `array` fields.
    """


@dataclass
class ArrayField1:
    """
    The field contains data which can be parsed as a valid JSON array.
    """

    name: str
    """
    A name for this field.
    """
    type: Type13
    """
    The type keyword, which `MUST` be a value of `array`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format9 | None = Format9.default
    """
    There are no format keyword options for `array`: only `default` is allowed.
    """
    constraints: Constraints27 | None = None
    """
    The following constraints apply for `array` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints28(Constraints13):
    """
    The following constraints are supported for `duration` fields.
    """


@dataclass
class DurationField1:
    """
    The field contains a duration of time.
    """

    name: str
    """
    A name for this field.
    """
    type: Type14
    """
    The type keyword, which `MUST` be a value of `duration`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    format: Format10 | None = Format10.default
    """
    There are no format keyword options for `duration`: only `default` is allowed.
    """
    constraints: Constraints28 | None = None
    """
    The following constraints are supported for `duration` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Constraints29(Constraints14):
    """
    The following constraints apply to `any` fields.
    """


@dataclass
class AnyField1:
    """
    Any value is accepted, including values that are not captured by the type/format/constraint requirements of the specification.
    """

    name: str
    """
    A name for this field.
    """
    type: Type15
    """
    The type keyword, which `MUST` be a value of `any`.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    example: str | None = None
    """
    An example value for the field.
    """
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """
    constraints: Constraints29 | None = None
    """
    The following constraints apply to `any` fields.
    """
    rdf_type: str | None = None
    """
    The RDF type for this field.
    """


@dataclass
class Reference2(Reference):
    pass


@dataclass
class TableSchemaForeignKey2:
    """
    Table Schema Foreign Key
    """

    fields: List[str]
    reference: Reference2


@dataclass
class Reference3(Reference1):
    pass


@dataclass
class TableSchemaForeignKey3:
    """
    Table Schema Foreign Key
    """

    fields: str
    """
    Fields that make up the primary key.
    """
    reference: Reference3


@dataclass
class TableSchema1:
    """
    A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.
    """

    fields: List[
        StringField1
        | NumberField1
        | IntegerField1
        | DateField1
        | TimeField1
        | DateTimeField1
        | YearField1
        | YearMonthField1
        | BooleanField1
        | ObjectField1
        | GeoPointField1
        | GeoJSONField1
        | ArrayField1
        | DurationField1
        | AnyField1
    ]
    """
    An `array` of Table Schema Field objects.
    """
    field_schema: str | None = "https://datapackage.org/profiles/1.0/tableschema.json"
    """
    The profile of this descriptor.
    """
    fields_match: List | None = None
    primary_key: List[str] | str | None = None
    """
    A primary key is a field name or an array of field names, whose values `MUST` uniquely identify each row in the table.
    """
    unique_keys: List[UniqueKey] | None = None
    foreign_keys: List[TableSchemaForeignKey2 | TableSchemaForeignKey3] | None = None
    missing_values: List[str] | List[MissingValue] | None = field(
        default_factory=lambda: [""]
    )
    """
    Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.
    """


@dataclass
class DataResource1:
    """
    Data Resource.
    """

    name: str
    """
    An identifier string.
    """
    path: str | List[Path]
    """
    A reference to the data for this resource, as either a path as a string, or an array of paths as strings. of valid URIs.
    """
    field_schema: str | None = "https://datapackage.org/profiles/1.0/dataresource.json"
    """
    The profile of this descriptor.
    """
    data: Any | None = None
    """
    Inline data for this resource.
    """
    type: Type | None = None
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    homepage: str | None = None
    """
    The home on the web that is related to this data package.
    """
    sources: List[Source] | None = None
    """
    The raw sources for this resource.
    """
    licenses: List[License4 | License5] | None = None
    """
    The license(s) under which the resource is published.
    """
    format: str | None = None
    """
    The file format of this resource.
    """
    mediatype: str | None = None
    """
    The media type of this resource. Can be any valid media type listed with [IANA](https://www.iana.org/assignments/media-types/media-types.xhtml).
    """
    encoding: str | None = "utf-8"
    """
    The file encoding of this resource.
    """
    bytes: int | None = None
    """
    The size of this resource in bytes.
    """
    hash: str | None = None
    """
    The MD5 hash of this resource. Indicate other hashing algorithms with the {algorithm}:{hash} format.
    """
    dialect: TableDialect1 | None = None
    """
    The Table dialect descriptor.
    """
    schema_: TableSchema1 | None = None
    """
    A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.
    """


@dataclass
class DataPackage:
    """
    Data Package
    """

    resources: List[DataResource | DataResource1]
    """
    An `array` of Data Resource objects, each compliant with the [Data Resource](/data-resource/) specification.
    """
    field_schema: str | None = "https://datapackage.org/profiles/1.0/datapackage.json"
    """
    The profile of this descriptor.
    """
    name: str | None = None
    """
    An identifier string.
    """
    id: str | None = None
    """
    A property reserved for globally unique identifiers. Examples of identifiers that are unique include UUIDs and DOIs.
    """
    title: str | None = None
    """
    A human-readable title.
    """
    description: str | None = None
    """
    A text description. Markdown is encouraged.
    """
    homepage: str | None = None
    """
    The home on the web that is related to this data package.
    """
    version: str | None = None
    """
    A unique version number for this descriptor.
    """
    created: str | None = None
    """
    The datetime on which this descriptor was created.
    """
    contributors: List[Contributor] | None = None
    """
    The contributors to this descriptor.
    """
    keywords: List[str] | None = None
    """
    A list of keywords that describe this package.
    """
    image: str | None = None
    """
    A image to represent this package.
    """
    licenses: List[License | License1] | None = None
    """
    The license(s) under which this package is published.
    """
    sources: List[Source] | None = None
    """
    The raw sources for this resource.
    """
